/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "setup(address,address,address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fill()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve_update(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_delegate(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_version(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "close()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "transfer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5FYXJseVN0YWtlUmV3YXJkLmFwcHJvdmFsX3Byb2dyYW06CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYm56IG1haW5fZW50cnlwb2ludEAyCiAgICBjYWxsc3ViIF9faW5pdF9fCgptYWluX2VudHJ5cG9pbnRAMjoKICAgIC8vIHNyYy9jb250cmFjdC5weTo4ODYtODkwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBFYXJseVN0YWtlUmV3YXJkCiAgICAvLyAjICAgZmFjaWxpdGF0ZXMgZWFybHkgc3Rha2luZyByZXdhcmRzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gY2xhc3MgRWFybHlTdGFrZVJld2FyZChBaXJkcm9wQnJpZGdlKToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxNQogICAgbWV0aG9kICJzZXR1cChhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyx1aW50NjQsdWludDY0KXZvaWQiCiAgICBtZXRob2QgImZpbGwoKXZvaWQiCiAgICBtZXRob2QgIndpdGhkcmF3KHVpbnQ2NCl1aW50NjQiCiAgICBtZXRob2QgImFwcHJvdmVfdXBkYXRlKGJvb2wpdm9pZCIKICAgIG1ldGhvZCAic2V0X2RlbGVnYXRlKGFkZHJlc3Mpdm9pZCIKICAgIG1ldGhvZCAicGFydGljaXBhdGUoYnl0ZVszMl0sYnl0ZVszMl0sdWludDY0LHVpbnQ2NCx1aW50NjQsYnl0ZVs2NF0pdm9pZCIKICAgIG1ldGhvZCAic2V0X3ZlcnNpb24odWludDY0LHVpbnQ2NCl2b2lkIgogICAgbWV0aG9kICJjbG9zZSgpdm9pZCIKICAgIG1ldGhvZCAidHJhbnNmZXIoYWRkcmVzcyl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9zZXR1cF9yb3V0ZUA0IG1haW5fZmlsbF9yb3V0ZUA1IG1haW5fd2l0aGRyYXdfcm91dGVANiBtYWluX2FwcHJvdmVfdXBkYXRlX3JvdXRlQDcgbWFpbl9zZXRfZGVsZWdhdGVfcm91dGVAOCBtYWluX3BhcnRpY2lwYXRlX3JvdXRlQDkgbWFpbl9zZXRfdmVyc2lvbl9yb3V0ZUAxMCBtYWluX2Nsb3NlX3JvdXRlQDExIG1haW5fdHJhbnNmZXJfcm91dGVAMTIKICAgIGVyciAvLyByZWplY3QgdHJhbnNhY3Rpb24KCm1haW5fc2V0dXBfcm91dGVANDoKICAgIC8vIHNyYy9jb250cmFjdC5weTo5MjMtOTQxCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IHNldHVwCiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBvd25lciwgd2hvIGlzIHRoZSBiZW5lZmljaWFyeQogICAgLy8gIyAtIGZ1bmRlciwgd2hvIGZ1bmRlZCB0aGUgY29udHJhY3QKICAgIC8vICMgLSBkZWxlZ2F0ZSwgd2hvIGlzIHRoZSBkZWxlZ2F0ZQogICAgLy8gIyAtIHBlcmlvZCwgbG9ja3VwIHBlcmlvZAogICAgLy8gIyAtIGluaXRpYWwsIGluaXRpYWwgYmFsYW5jZQogICAgLy8gIyBwdXJwb3NlOgogICAgLy8gIyAtIENvbmZpZ3VyZXMgdGhlIGluaXRpYWwgc2V0dGluZ3Mgb2YgdGhlIGNvbnRyYWN0LAogICAgLy8gIyAgIGluY2x1ZGluZyB0aGUgb3duZXIsIGZ1bmRlciwgZGVsZWdhdGUsIGFuZAogICAgLy8gIyAgIHN0YWtpbmcgcGVyaW9kLgogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gU2V0cyB0aGUgb3duZXIsIGZ1bmRlciwgZGVsZWdhdGUsIHBlcmlvZCwKICAgIC8vICMgICBhbmQgaW5pdGlhbCBwYXltZW50IGFmdGVyIHZlcmlmeWluZyB0aGF0IHRoZXkKICAgIC8vICMgICBoYXZlIG5vdCBiZWVuIHNldCBiZWZvcmUgYW5kIHRoYXQgdGhlIGNyZWF0b3IKICAgIC8vICMgICBpcyBtYWtpbmcgdGhlIGNhbGwuCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9jb250cmFjdC5weTo4ODYtODkwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBFYXJseVN0YWtlUmV3YXJkCiAgICAvLyAjICAgZmFjaWxpdGF0ZXMgZWFybHkgc3Rha2luZyByZXdhcmRzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gY2xhc3MgRWFybHlTdGFrZVJld2FyZChBaXJkcm9wQnJpZGdlKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDUKICAgIC8vIHNyYy9jb250cmFjdC5weTo5MjMtOTQxCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IHNldHVwCiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBvd25lciwgd2hvIGlzIHRoZSBiZW5lZmljaWFyeQogICAgLy8gIyAtIGZ1bmRlciwgd2hvIGZ1bmRlZCB0aGUgY29udHJhY3QKICAgIC8vICMgLSBkZWxlZ2F0ZSwgd2hvIGlzIHRoZSBkZWxlZ2F0ZQogICAgLy8gIyAtIHBlcmlvZCwgbG9ja3VwIHBlcmlvZAogICAgLy8gIyAtIGluaXRpYWwsIGluaXRpYWwgYmFsYW5jZQogICAgLy8gIyBwdXJwb3NlOgogICAgLy8gIyAtIENvbmZpZ3VyZXMgdGhlIGluaXRpYWwgc2V0dGluZ3Mgb2YgdGhlIGNvbnRyYWN0LAogICAgLy8gIyAgIGluY2x1ZGluZyB0aGUgb3duZXIsIGZ1bmRlciwgZGVsZWdhdGUsIGFuZAogICAgLy8gIyAgIHN0YWtpbmcgcGVyaW9kLgogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gU2V0cyB0aGUgb3duZXIsIGZ1bmRlciwgZGVsZWdhdGUsIHBlcmlvZCwKICAgIC8vICMgICBhbmQgaW5pdGlhbCBwYXltZW50IGFmdGVyIHZlcmlmeWluZyB0aGF0IHRoZXkKICAgIC8vICMgICBoYXZlIG5vdCBiZWVuIHNldCBiZWZvcmUgYW5kIHRoYXQgdGhlIGNyZWF0b3IKICAgIC8vICMgICBpcyBtYWtpbmcgdGhlIGNhbGwuCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc2V0dXAKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fZmlsbF9yb3V0ZUA1OgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojk2My05ODAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IGZpbGwKICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIGZ1bmRpbmcsIHdoZW4gZnVuZGVkCiAgICAvLyAjIHB1cnBvc2U6IEFsbG93cyB0aGUgY29udHJhY3QgdG8gYmUgZnVuZGVkLgogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG1pbmltdW0gYmFsYW5jZSBvZiBhcHBsaWNhdGlvbiBhZGRyZXNzCiAgICAvLyAjICAgc2F0aXNmaWVkCiAgICAvLyAjIC0gcGVyaW9kIG11c3QgYmUgc2V0CiAgICAvLyAjIC0gZnVuZGluZyBhbmQgdG90YWwgbXVzdCBiZSB1bmluaXRpYWxpemVkCiAgICAvLyAjIC0gbXVzdCBiZSBjb21iaW5lZCB3aXRoIHBheW1lbnQgdHJhbnNhY3Rpb24KICAgIC8vICMgICBmb3IgdG90YWwgYW1vdW50CiAgICAvLyAjIC0gbXVzdCBiZSBvbmx5IGNhbGxhYmxlIGJ5IGZ1bmRlcgogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gU2V0cyB0aGUgdG90YWwgYW1vdW50IGFuZCBtYXJrcyB0aGUgZnVuZGluZwogICAgLy8gIyAgIHRpbWVzdGFtcC4KICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBmaWxsCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3dpdGhkcmF3X3JvdXRlQDY6CiAgICAvLyBzcmMvY29udHJhY3QucHk6OTk2LTEwMTIKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IHdpdGhkcmF3IChvdmVycmlkZSkKICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIGFtb3VudAogICAgLy8gIyByZXR1cm5zOiBtaW4gYmFsYW5jZQogICAgLy8gIyBwdXJwb3NlOiBleHRyYWN0IGZ1bmRzIGZyb20gY29udHJhY3QKICAgIC8vICMgcHJlLWNvbmRpdGlvbnMKICAgIC8vICMgLSBvbmx5IGNhbGxhYmxlIGJ5IG93bmVyCiAgICAvLyAjIC0gbGV0IGJhbGFuY2UgYmUgdGhlIGN1cnJlbnQgYmFsYW5jZSBvZiB0aGUKICAgIC8vICMgICBjb250cmFjdAogICAgLy8gIyAtIGJhbGFuY2UgLSBhbW91bnQgPj0gbWluX2JhbGFuY2UKICAgIC8vICMgICAoZmVlIHBhaWQgaW4gYXBwbCB0eG4pCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSB0cmFuc2ZlciBhbW91bnQgZnJvbSB0aGUgY29udHJhY3QgYWNjb3VudAogICAgLy8gIyAgIHRvIG93bmVyCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9jb250cmFjdC5weTo4ODYtODkwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBFYXJseVN0YWtlUmV3YXJkCiAgICAvLyAjICAgZmFjaWxpdGF0ZXMgZWFybHkgc3Rha2luZyByZXdhcmRzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gY2xhc3MgRWFybHlTdGFrZVJld2FyZChBaXJkcm9wQnJpZGdlKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNyYy9jb250cmFjdC5weTo5OTYtMTAxMgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogd2l0aGRyYXcgKG92ZXJyaWRlKQogICAgLy8gIyBhcmd1bWVudHM6CiAgICAvLyAjIC0gYW1vdW50CiAgICAvLyAjIHJldHVybnM6IG1pbiBiYWxhbmNlCiAgICAvLyAjIHB1cnBvc2U6IGV4dHJhY3QgZnVuZHMgZnJvbSBjb250cmFjdAogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG9ubHkgY2FsbGFibGUgYnkgb3duZXIKICAgIC8vICMgLSBsZXQgYmFsYW5jZSBiZSB0aGUgY3VycmVudCBiYWxhbmNlIG9mIHRoZQogICAgLy8gIyAgIGNvbnRyYWN0CiAgICAvLyAjIC0gYmFsYW5jZSAtIGFtb3VudCA+PSBtaW5fYmFsYW5jZQogICAgLy8gIyAgIChmZWUgcGFpZCBpbiBhcHBsIHR4bikKICAgIC8vICMgcG9zdC1jb25kaXRpb25zOgogICAgLy8gIyAtIHRyYW5zZmVyIGFtb3VudCBmcm9tIHRoZSBjb250cmFjdCBhY2NvdW50CiAgICAvLyAjICAgdG8gb3duZXIKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiB3aXRoZHJhdwogICAgaXRvYgogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9hcHByb3ZlX3VwZGF0ZV9yb3V0ZUA3OgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU2Mi01NzIKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IGFwcHJvdmVfdXBkYXRlCiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBhcHByb3ZhbCwgYXBwcm92YWwgc3RhdHVzCiAgICAvLyAjIHB1cnBvc2U6IGFwcHJvdmUgdXBkYXRlCiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gb25seSBjYWxsYWJsZSBieSBvd25lcgogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gdXBkYXRhYmxlIHNldCB0byBhcHByb3ZhbAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODg2LTg5MAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgRWFybHlTdGFrZVJld2FyZAogICAgLy8gIyAgIGZhY2lsaXRhdGVzIGVhcmx5IHN0YWtpbmcgcmV3YXJkcwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGNsYXNzIEVhcmx5U3Rha2VSZXdhcmQoQWlyZHJvcEJyaWRnZSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTYyLTU3MgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogYXBwcm92ZV91cGRhdGUKICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIGFwcHJvdmFsLCBhcHByb3ZhbCBzdGF0dXMKICAgIC8vICMgcHVycG9zZTogYXBwcm92ZSB1cGRhdGUKICAgIC8vICMgcHJlLWNvbmRpdGlvbnMKICAgIC8vICMgLSBvbmx5IGNhbGxhYmxlIGJ5IG93bmVyCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSB1cGRhdGFibGUgc2V0IHRvIGFwcHJvdmFsCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgYXBwcm92ZV91cGRhdGUKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fc2V0X2RlbGVnYXRlX3JvdXRlQDg6CiAgICAvLyBzcmMvY29udHJhY3QucHk6NzYtODUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogc2V0X2RlbGVnYXRlCiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBkZWxlZ2F0ZSwgd2hvIGlzIHRoZSBkZWxlZ2F0ZQogICAgLy8gIyBwdXJwb3NlOiBzZXQgZGVsZWdhdGUKICAgIC8vICMgcHJlLWNvbmRpdGlvbnMKICAgIC8vICMgLSBvbmx5IGNhbGxhYmxlIGJ5IG93bmVyCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczogZGVsZWdhdGUgc2V0CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9jb250cmFjdC5weTo4ODYtODkwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBFYXJseVN0YWtlUmV3YXJkCiAgICAvLyAjICAgZmFjaWxpdGF0ZXMgZWFybHkgc3Rha2luZyByZXdhcmRzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gY2xhc3MgRWFybHlTdGFrZVJld2FyZChBaXJkcm9wQnJpZGdlKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNyYy9jb250cmFjdC5weTo3Ni04NQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiBzZXRfZGVsZWdhdGUKICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIGRlbGVnYXRlLCB3aG8gaXMgdGhlIGRlbGVnYXRlCiAgICAvLyAjIHB1cnBvc2U6IHNldCBkZWxlZ2F0ZQogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG9ubHkgY2FsbGFibGUgYnkgb3duZXIKICAgIC8vICMgcG9zdC1jb25kaXRpb25zOiBkZWxlZ2F0ZSBzZXQKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBzZXRfZGVsZWdhdGUKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fcGFydGljaXBhdGVfcm91dGVAOToKICAgIC8vIHNyYy9jb250cmFjdC5weTo4OS0xMDcKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IHBhcnRpY2lwYXRlCiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBrZXkgcmVnaXN0cmF0aW9uIHBhcmFtcwogICAgLy8gIyBwdXJwb3NlOiBhbGxvdyBjb250cmFjdCB0byBwYXJ0aWNwYXRlCiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gbXVzdCBiZSBjYWxsYWJsZSBieSBvd25lciBvbmx5CiAgICAvLyAjIC0gbXVzdCBiZSBjb21iaW5lZCB3aXRoIHRyYW5zYWN0aW9uIHRyYW5zZmVyaW5nCiAgICAvLyAjICAgb25lIGZlZSBpbnRvIHRoZSBjb250cmFjdCBhY2NvdW50CiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSBjb250cmFjdCBnZW5lcmF0ZXMgaXRueCBmb3Iga2V5cmVnCiAgICAvLyAjIG5vdGVzOgogICAgLy8gIyAtIGZlZSBwYXltZW50IGlzIHRvIHByZXZlbnQgcG90ZW50aWFsIGRyYWluaW5nCiAgICAvLyAjICAgaW50byBmZWVzLCBldmVuIHRob3VnaCBpdCBpcyBub3QgbGlrZWx5IHRoYXQKICAgIC8vICMgICBhIHVzZXIgbWF5IGF0dGVtcHQgdG8gZHJhaW4gdGhlaXIgZnVuZHMKICAgIC8vICMgLSBtaW4gYmFsYW5jZSBpcyBub3QgcmVsZXZhbnQgZHVlIHRvIHRoZSBmZWUKICAgIC8vICMgICBwYXltZW50IGFkZGVkCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9jb250cmFjdC5weTo4ODYtODkwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBFYXJseVN0YWtlUmV3YXJkCiAgICAvLyAjICAgZmFjaWxpdGF0ZXMgZWFybHkgc3Rha2luZyByZXdhcmRzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gY2xhc3MgRWFybHlTdGFrZVJld2FyZChBaXJkcm9wQnJpZGdlKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDUKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDYKICAgIC8vIHNyYy9jb250cmFjdC5weTo4OS0xMDcKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IHBhcnRpY2lwYXRlCiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBrZXkgcmVnaXN0cmF0aW9uIHBhcmFtcwogICAgLy8gIyBwdXJwb3NlOiBhbGxvdyBjb250cmFjdCB0byBwYXJ0aWNwYXRlCiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gbXVzdCBiZSBjYWxsYWJsZSBieSBvd25lciBvbmx5CiAgICAvLyAjIC0gbXVzdCBiZSBjb21iaW5lZCB3aXRoIHRyYW5zYWN0aW9uIHRyYW5zZmVyaW5nCiAgICAvLyAjICAgb25lIGZlZSBpbnRvIHRoZSBjb250cmFjdCBhY2NvdW50CiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSBjb250cmFjdCBnZW5lcmF0ZXMgaXRueCBmb3Iga2V5cmVnCiAgICAvLyAjIG5vdGVzOgogICAgLy8gIyAtIGZlZSBwYXltZW50IGlzIHRvIHByZXZlbnQgcG90ZW50aWFsIGRyYWluaW5nCiAgICAvLyAjICAgaW50byBmZWVzLCBldmVuIHRob3VnaCBpdCBpcyBub3QgbGlrZWx5IHRoYXQKICAgIC8vICMgICBhIHVzZXIgbWF5IGF0dGVtcHQgdG8gZHJhaW4gdGhlaXIgZnVuZHMKICAgIC8vICMgLSBtaW4gYmFsYW5jZSBpcyBub3QgcmVsZXZhbnQgZHVlIHRvIHRoZSBmZWUKICAgIC8vICMgICBwYXltZW50IGFkZGVkCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgcGFydGljaXBhdGUKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fc2V0X3ZlcnNpb25fcm91dGVAMTA6CiAgICAvLyBzcmMvY29udHJhY3QucHk6MTc2LTE4NwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogc2V0X3ZlcnNpb24KICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIGNvbnRyYWN0X3ZlcnNpb24sIGNvbnRyYWN0IHZlcnNpb24KICAgIC8vICMgLSBkZXBsb3ltZW50X3ZlcnNpb24sIGRlcGxveW1lbnQgdmVyc2lvbgogICAgLy8gIyBwdXJwb3NlOiBzZXQgdmVyc2lvbgogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG9ubHkgY2FsbGFibGUgYnkgY3JlYXRvcgogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gY29udHJhY3RfdmVyc2lvbiBhbmQgZGVwbG95bWVudF92ZXJzaW9uIHNldAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODg2LTg5MAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgRWFybHlTdGFrZVJld2FyZAogICAgLy8gIyAgIGZhY2lsaXRhdGVzIGVhcmx5IHN0YWtpbmcgcmV3YXJkcwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGNsYXNzIEVhcmx5U3Rha2VSZXdhcmQoQWlyZHJvcEJyaWRnZSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTc2LTE4NwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogc2V0X3ZlcnNpb24KICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIGNvbnRyYWN0X3ZlcnNpb24sIGNvbnRyYWN0IHZlcnNpb24KICAgIC8vICMgLSBkZXBsb3ltZW50X3ZlcnNpb24sIGRlcGxveW1lbnQgdmVyc2lvbgogICAgLy8gIyBwdXJwb3NlOiBzZXQgdmVyc2lvbgogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG9ubHkgY2FsbGFibGUgYnkgY3JlYXRvcgogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gY29udHJhY3RfdmVyc2lvbiBhbmQgZGVwbG95bWVudF92ZXJzaW9uIHNldAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHNldF92ZXJzaW9uCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2Nsb3NlX3JvdXRlQDExOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI5NS0zMDkKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IGNsb3NlCiAgICAvLyAjIHB1cnBvc2U6IGRlbGV0ZXMgY29udHJhY3QKICAgIC8vICMgcHJlLWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gbWluIGJhbGFuY2UgaXMgMAogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gY29udHJhY3QgaXMgZGVsZXRlZAogICAgLy8gIyAtIGFjY291bnQgY2xvc2VkIG91dCB0byBvd25lciBpZiBpdCBoYXMgYSBiYWxhbmNlCiAgICAvLyAjIG5vdGVzOgogICAgLy8gIyAtIHNob3VsZCBiZSBhbGxlZCB3aXRoIG9uQ29tcGxldGlvbgogICAgLy8gIyAgIGRlbGV0ZUFwcGxpY2F0aW9uCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bCiAgICAvLyAgICAgT25Db21wbGV0ZUFjdGlvbi5EZWxldGVBcHBsaWNhdGlvbgogICAgLy8gXSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludCBEZWxldGVBcHBsaWNhdGlvbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgRGVsZXRlQXBwbGljYXRpb24KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGNsb3NlCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3RyYW5zZmVyX3JvdXRlQDEyOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjUyLTYyCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiB0cmFuc2ZlcgogICAgLy8gIyBhcmd1bWVudHM6CiAgICAvLyAjIC0gbmV3X293bmVyLCBuZXcgb3duZXIKICAgIC8vICMgcHVycG9zZTogY2hhbmdlIG93bmVyCiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gb25seSBjYWxsYWJsZSBieSB0aGUgb3duZXIKICAgIC8vICMgcG9zdC1jb25kaXRpb25zOgogICAgLy8gIyAtIG5ldyBvd25lciBhc2lnbmVkCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9jb250cmFjdC5weTo4ODYtODkwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBFYXJseVN0YWtlUmV3YXJkCiAgICAvLyAjICAgZmFjaWxpdGF0ZXMgZWFybHkgc3Rha2luZyByZXdhcmRzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gY2xhc3MgRWFybHlTdGFrZVJld2FyZChBaXJkcm9wQnJpZGdlKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNyYy9jb250cmFjdC5weTo1Mi02MgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogdHJhbnNmZXIKICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIG5ld19vd25lciwgbmV3IG93bmVyCiAgICAvLyAjIHB1cnBvc2U6IGNoYW5nZSBvd25lcgogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG9ubHkgY2FsbGFibGUgYnkgdGhlIG93bmVyCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSBuZXcgb3duZXIgYXNpZ25lZAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHRyYW5zZmVyCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxNToKICAgIC8vIHNyYy9jb250cmFjdC5weTo4ODYtODkwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBFYXJseVN0YWtlUmV3YXJkCiAgICAvLyAjICAgZmFjaWxpdGF0ZXMgZWFybHkgc3Rha2luZyByZXdhcmRzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gY2xhc3MgRWFybHlTdGFrZVJld2FyZChBaXJkcm9wQnJpZGdlKToKICAgIGludCAwCiAgICBpbnQgNAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgbWF0Y2ggbWFpbl9vbl9jcmVhdGVAMTYgbWFpbl9vbl91cGRhdGVAMTcKICAgIGVyciAvLyByZWplY3QgdHJhbnNhY3Rpb24KCm1haW5fb25fY3JlYXRlQDE2OgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjkwNS05MTgKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IG9uX2NyZWF0ZQogICAgLy8gIyBhcmd1bWVudHM6IE5vbmUKICAgIC8vICMgcHVycG9zZTogSGFuZGxlcyBhY3Rpb25zIHJlcXVpcmVkIGR1cmluZyB0aGUKICAgIC8vICMgICAgICAgICAgY3JlYXRpb24gb2YgdGhlIGNvbnRyYWN0LgogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG9ubHkgY2FsbGFibGUgYnkgQ3JlYXRlQXBwbGljYXRpb24KICAgIC8vICMgcG9zdC1jb25kaXRpb25zOgogICAgLy8gIyAtIHBhcmVudF9pZCBzZXQgdG8gY2FsbGVyX2FwcGxpY2F0aW9uX2lkCiAgICAvLyAjIGRldGFpbHM6CiAgICAvLyAjIC0gRW5zdXJlcyB0aGF0IHRoZSBjb250cmFjdCBpcyBjcmVhdGVkIGJ5IGEKICAgIC8vICMgICBmYWN0b3J5LCB2YWxpZGF0aW5nIHRoZSBjYWxsZXJfYXBwbGljYXRpb25faWQuCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGlzIGNyZWF0aW5nCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTA1LTkxOQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogb25fY3JlYXRlCiAgICAvLyAjIGFyZ3VtZW50czogTm9uZQogICAgLy8gIyBwdXJwb3NlOiBIYW5kbGVzIGFjdGlvbnMgcmVxdWlyZWQgZHVyaW5nIHRoZQogICAgLy8gIyAgICAgICAgICBjcmVhdGlvbiBvZiB0aGUgY29udHJhY3QuCiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gb25seSBjYWxsYWJsZSBieSBDcmVhdGVBcHBsaWNhdGlvbgogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gcGFyZW50X2lkIHNldCB0byBjYWxsZXJfYXBwbGljYXRpb25faWQKICAgIC8vICMgZGV0YWlsczoKICAgIC8vICMgLSBFbnN1cmVzIHRoYXQgdGhlIGNvbnRyYWN0IGlzIGNyZWF0ZWQgYnkgYQogICAgLy8gIyAgIGZhY3RvcnksIHZhbGlkYXRpbmcgdGhlIGNhbGxlcl9hcHBsaWNhdGlvbl9pZC4KICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIC8vIGRlZiBvbl9jcmVhdGUoc2VsZikgLT4gTm9uZToKICAgIGNhbGxzdWIgb25fY3JlYXRlCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX29uX3VwZGF0ZUAxNzoKICAgIC8vIHNyYy9jb250cmFjdC5weToxOTItMjAyCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiBvbl91cGRhdGUKICAgIC8vICMgYXJndW1lbnRzOiBOb25lCiAgICAvLyAjIHB1cnBvc2U6IG9uIHVwZGF0ZQogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG9ubHkgY2FsbGFibGUgYnkgY3JlYXRvcgogICAgLy8gIyAtIHVwZGF0YWJsZSBtdXN0IGJlIHRydWUKICAgIC8vICMgcG9zdC1jb25kaXRpb25zOgogICAgLy8gIyAtIE5vbmUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoYWxsb3dfYWN0aW9ucz1bIlVwZGF0ZUFwcGxpY2F0aW9uIl0pCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE5Mi0yMDMKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IG9uX3VwZGF0ZQogICAgLy8gIyBhcmd1bWVudHM6IE5vbmUKICAgIC8vICMgcHVycG9zZTogb24gdXBkYXRlCiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gb25seSBjYWxsYWJsZSBieSBjcmVhdG9yCiAgICAvLyAjIC0gdXBkYXRhYmxlIG11c3QgYmUgdHJ1ZQogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gTm9uZQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVsiVXBkYXRlQXBwbGljYXRpb24iXSkKICAgIC8vIGRlZiBvbl91cGRhdGUoc2VsZikgLT4gTm9uZToKICAgIGNhbGxzdWIgb25fdXBkYXRlCiAgICBpbnQgMQogICAgcmV0dXJuCgoKLy8gY29udHJhY3QuRWFybHlTdGFrZVJld2FyZC5zZXR1cChvd25lcjogYnl0ZXMsIGZ1bmRlcjogYnl0ZXMsIGRlbGVnYXRlOiBieXRlcywgcGVyaW9kOiBieXRlcywgaW5pdGlhbDogYnl0ZXMpIC0+IHZvaWQ6CnNldHVwOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjkyMy05NDMKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogc2V0dXAKICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIG93bmVyLCB3aG8gaXMgdGhlIGJlbmVmaWNpYXJ5CiAgICAvLyAjIC0gZnVuZGVyLCB3aG8gZnVuZGVkIHRoZSBjb250cmFjdAogICAgLy8gIyAtIGRlbGVnYXRlLCB3aG8gaXMgdGhlIGRlbGVnYXRlCiAgICAvLyAjIC0gcGVyaW9kLCBsb2NrdXAgcGVyaW9kCiAgICAvLyAjIC0gaW5pdGlhbCwgaW5pdGlhbCBiYWxhbmNlCiAgICAvLyAjIHB1cnBvc2U6CiAgICAvLyAjIC0gQ29uZmlndXJlcyB0aGUgaW5pdGlhbCBzZXR0aW5ncyBvZiB0aGUgY29udHJhY3QsCiAgICAvLyAjICAgaW5jbHVkaW5nIHRoZSBvd25lciwgZnVuZGVyLCBkZWxlZ2F0ZSwgYW5kCiAgICAvLyAjICAgc3Rha2luZyBwZXJpb2QuCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSBTZXRzIHRoZSBvd25lciwgZnVuZGVyLCBkZWxlZ2F0ZSwgcGVyaW9kLAogICAgLy8gIyAgIGFuZCBpbml0aWFsIHBheW1lbnQgYWZ0ZXIgdmVyaWZ5aW5nIHRoYXQgdGhleQogICAgLy8gIyAgIGhhdmUgbm90IGJlZW4gc2V0IGJlZm9yZSBhbmQgdGhhdCB0aGUgY3JlYXRvcgogICAgLy8gIyAgIGlzIG1ha2luZyB0aGUgY2FsbC4KICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHNldHVwKHNlbGYsIG93bmVyOiBhcmM0LkFkZHJlc3MsIGZ1bmRlcjogYXJjNC5BZGRyZXNzLCBkZWxlZ2F0ZTogYXJjNC5BZGRyZXNzLAogICAgLy8gICAgIHBlcmlvZDogYXJjNC5VSW50NjQsIGluaXRpYWw6IGFyYzQuVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gNSAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTQ0LTk0NQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5vd25lciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAib3duZXIgbm90IGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo1MQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKSAgICAgICAgICAgICAjIHplcm8gYWRkcmVzcwogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTQ0LTk0NQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5vd25lciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAib3duZXIgbm90IGluaXRpYWxpemVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIG93bmVyIG5vdCBpbml0aWFsaXplZAogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojk0NgogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJmdW5kZXIgbm90IGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weToyNDctMjQ4CiAgICAvLyAjIGhvdCBzdGF0ZQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkgICAgICAgICAgICAjIHplcm8gYWRkcmVzcwogICAgYnl0ZSAiZnVuZGVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojk0NgogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJmdW5kZXIgbm90IGluaXRpYWxpemVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRlciBleGlzdHMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBmdW5kZXIgbm90IGluaXRpYWxpemVkCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTQ3LTk0OAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzLCAibXVzdCBiZSBjcmVhdG9yIgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgY3JlYXRvcgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojk0OS05NTAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHBlcmlvZCA8PSBUZW1wbGF0ZVZhcltVSW50NjRdKCJQRVJJT0RfTElNSVQiKQogICAgaW50IFRNUExfUEVSSU9EX0xJTUlUCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTIKICAgIGI+PQogICAgYXNzZXJ0CiAgICAvLyBzcmMvY29udHJhY3QucHk6OTUxCiAgICAvLyBhc3NlcnQgcGVyaW9kID4gMAogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgYj4KICAgIGFzc2VydAogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojk1Mi05NTMKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IGluaXRpYWwgPiBVSW50NjQoMCksICJwYXltZW50IGFtb3VudCBhY2N1cmF0ZSIKICAgIGludCAwCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTEKICAgIGI8CiAgICBhc3NlcnQgLy8gcGF5bWVudCBhbW91bnQgYWNjdXJhdGUKICAgIC8vIHNyYy9jb250cmFjdC5weTo5NTQtOTU1CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYuaW5pdGlhbCA9IGluaXRpYWwubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIC8vIHNyYy9jb250cmFjdC5weToyNTIKICAgIC8vIHNlbGYuaW5pdGlhbCA9IFVJbnQ2NCgpICAgICAgICAgICAgIyAwCiAgICBieXRlICJpbml0aWFsIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojk1NC05NTUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi5pbml0aWFsID0gaW5pdGlhbC5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6NTEKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkgICAgICAgICAgICAgIyB6ZXJvIGFkZHJlc3MKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojk1NgogICAgLy8gc2VsZi5vd25lciA9IG93bmVyLm5hdGl2ZQogICAgZnJhbWVfZGlnIC01CiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI0Ny0yNDgKICAgIC8vICMgaG90IHN0YXRlCiAgICAvLyBzZWxmLmZ1bmRlciA9IEFjY291bnQoKSAgICAgICAgICAgICMgemVybyBhZGRyZXNzCiAgICBieXRlICJmdW5kZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTU3CiAgICAvLyBzZWxmLmZ1bmRlciA9IGZ1bmRlci5uYXRpdmUKICAgIGZyYW1lX2RpZyAtNAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weTo3NAogICAgLy8gc2VsZi5kZWxlZ2F0ZSA9IEFjY291bnQoKSAgICAgICAgICAjIHplcm8gYWRkcmVzcwogICAgYnl0ZSAiZGVsZWdhdGUiCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTU4CiAgICAvLyBzZWxmLmRlbGVnYXRlID0gZGVsZWdhdGUubmF0aXZlCiAgICBmcmFtZV9kaWcgLTMKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6MjUzCiAgICAvLyBzZWxmLmRlYWRsaW5lID0gVUludDY0KCkgICAgICAgICAgICMgMAogICAgYnl0ZSAiZGVhZGxpbmUiCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTU5CiAgICAvLyBzZWxmLmRlYWRsaW5lID0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6OTYwCiAgICAvLyBzZWxmLnBlcmlvZCA9IHBlcmlvZC5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI0OQogICAgLy8gc2VsZi5wZXJpb2QgPSBVSW50NjQoKSAgICAgICAgICAgICAjIDAKICAgIGJ5dGUgInBlcmlvZCIKICAgIC8vIHNyYy9jb250cmFjdC5weTo5NjAKICAgIC8vIHNlbGYucGVyaW9kID0gcGVyaW9kLm5hdGl2ZQogICAgZGlnIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6OTYxCiAgICAvLyBzZWxmLnZlc3RpbmdfZGVsYXkgPSAocGVyaW9kLm5hdGl2ZSArIFVJbnQ2NCgxKSkgKiBVSW50NjQoMikgLy8gVUludDY0KDMpCiAgICBpbnQgMQogICAgKwogICAgaW50IDIKICAgICoKICAgIGludCAzCiAgICAvCiAgICAvLyBzcmMvY29udHJhY3QucHk6MjU5CiAgICAvLyBzZWxmLnZlc3RpbmdfZGVsYXkgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJWRVNUSU5HX0RFTEFZIikgICAjIGV4KSAxMgogICAgYnl0ZSAidmVzdGluZ19kZWxheSIKICAgIC8vIHNyYy9jb250cmFjdC5weTo5NjEKICAgIC8vIHNlbGYudmVzdGluZ19kZWxheSA9IChwZXJpb2QubmF0aXZlICsgVUludDY0KDEpKSAqIFVJbnQ2NCgyKSAvLyBVSW50NjQoMykKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5FYXJseVN0YWtlUmV3YXJkLmZpbGwoKSAtPiB2b2lkOgpmaWxsOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojk2My05ODEKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IGZpbGwKICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIGZ1bmRpbmcsIHdoZW4gZnVuZGVkCiAgICAvLyAjIHB1cnBvc2U6IEFsbG93cyB0aGUgY29udHJhY3QgdG8gYmUgZnVuZGVkLgogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG1pbmltdW0gYmFsYW5jZSBvZiBhcHBsaWNhdGlvbiBhZGRyZXNzCiAgICAvLyAjICAgc2F0aXNmaWVkCiAgICAvLyAjIC0gcGVyaW9kIG11c3QgYmUgc2V0CiAgICAvLyAjIC0gZnVuZGluZyBhbmQgdG90YWwgbXVzdCBiZSB1bmluaXRpYWxpemVkCiAgICAvLyAjIC0gbXVzdCBiZSBjb21iaW5lZCB3aXRoIHBheW1lbnQgdHJhbnNhY3Rpb24KICAgIC8vICMgICBmb3IgdG90YWwgYW1vdW50CiAgICAvLyAjIC0gbXVzdCBiZSBvbmx5IGNhbGxhYmxlIGJ5IGZ1bmRlcgogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gU2V0cyB0aGUgdG90YWwgYW1vdW50IGFuZCBtYXJrcyB0aGUgZnVuZGluZwogICAgLy8gIyAgIHRpbWVzdGFtcC4KICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGZpbGwoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojk4Mi05ODMKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYub3duZXIgIT0gR2xvYmFsLnplcm9fYWRkcmVzcywgIm93bmVyIGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo1MQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKSAgICAgICAgICAgICAjIHplcm8gYWRkcmVzcwogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTgyLTk4MwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5vd25lciAhPSBHbG9iYWwuemVyb19hZGRyZXNzLCAib3duZXIgaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBhc3NlcnQgLy8gb3duZXIgaW5pdGlhbGl6ZWQKICAgIC8vIHNyYy9jb250cmFjdC5weTo5ODQKICAgIC8vIGFzc2VydCBzZWxmLmZ1bmRlciAhPSBHbG9iYWwuemVyb19hZGRyZXNzLCAiZnVuZGVyIGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weToyNDctMjQ4CiAgICAvLyAjIGhvdCBzdGF0ZQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkgICAgICAgICAgICAjIHplcm8gYWRkcmVzcwogICAgYnl0ZSAiZnVuZGVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojk4NAogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGVyICE9IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJmdW5kZXIgaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGVyIGV4aXN0cwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYXNzZXJ0IC8vIGZ1bmRlciBpbml0aWFsaXplZAogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojk4NQogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGluZyA9PSAwLCAiZnVuZGluZyBub3QgaW5pdGlhbGl6ZWQiCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI1MAogICAgLy8gc2VsZi5mdW5kaW5nID0gVUludDY0KCkgICAgICAgICAgICAjIDAKICAgIGJ5dGUgImZ1bmRpbmciCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTg1CiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kaW5nID09IDAsICJmdW5kaW5nIG5vdCBpbml0aWFsaXplZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kaW5nIGV4aXN0cwogICAgIQogICAgYXNzZXJ0IC8vIGZ1bmRpbmcgbm90IGluaXRpYWxpemVkCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTg2LTk4NwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmZ1bmRlciwgIm11c3QgYmUgZnVuZGVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weToyNDctMjQ4CiAgICAvLyAjIGhvdCBzdGF0ZQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkgICAgICAgICAgICAjIHplcm8gYWRkcmVzcwogICAgYnl0ZSAiZnVuZGVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojk4Ni05ODcKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5mdW5kZXIsICJtdXN0IGJlIGZ1bmRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kZXIgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgZnVuZGVyCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTg4LTk4OQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBwYXltZW50X2Ftb3VudCA9IHJlcXVpcmVfcGF5bWVudChzZWxmLmZ1bmRlcikKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6MjQ3LTI0OAogICAgLy8gIyBob3Qgc3RhdGUKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpICAgICAgICAgICAgIyB6ZXJvIGFkZHJlc3MKICAgIGJ5dGUgImZ1bmRlciIKICAgIC8vIHNyYy9jb250cmFjdC5weTo5ODgtOTg5CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHBheW1lbnRfYW1vdW50ID0gcmVxdWlyZV9wYXltZW50KHNlbGYuZnVuZGVyKQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRlciBleGlzdHMKICAgIGNhbGxzdWIgcmVxdWlyZV9wYXltZW50CiAgICAvLyBzcmMvY29udHJhY3QucHk6OTkwCiAgICAvLyBtaW5fYmFsYW5jZSA9IG9wLkdsb2JhbC5taW5fYmFsYW5jZQogICAgZ2xvYmFsIE1pbkJhbGFuY2UKICAgIHN3YXAKICAgIC8vIHNyYy9jb250cmFjdC5weTo5OTEKICAgIC8vIGFzc2VydCBwYXltZW50X2Ftb3VudCA+IFVJbnQ2NCgwKSwgInBheW1lbnQgYW1vdW50IGFjY3VyYXRlIgogICAgYXNzZXJ0IC8vIHBheW1lbnQgYW1vdW50IGFjY3VyYXRlCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTkyLTk5MwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhcHBsaWNhdGlvbl9hZGRyZXNzID0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIC8vIHNyYy9jb250cmFjdC5weTo5OTQKICAgIC8vIHNlbGYudG90YWwgPSBhcHBsaWNhdGlvbl9hZGRyZXNzLmJhbGFuY2UgLSBtaW5fYmFsYW5jZQogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIHN3YXAKICAgIC0KICAgIC8vIHNyYy9jb250cmFjdC5weToyNTEKICAgIC8vIHNlbGYudG90YWwgPSBVSW50NjQoKSAgICAgICAgICAgICAgIyAwCiAgICBieXRlICJ0b3RhbCIKICAgIC8vIHNyYy9jb250cmFjdC5weTo5OTQKICAgIC8vIHNlbGYudG90YWwgPSBhcHBsaWNhdGlvbl9hZGRyZXNzLmJhbGFuY2UgLSBtaW5fYmFsYW5jZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weToyNTAKICAgIC8vIHNlbGYuZnVuZGluZyA9IFVJbnQ2NCgpICAgICAgICAgICAgIyAwCiAgICBieXRlICJmdW5kaW5nIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojk5NQogICAgLy8gc2VsZi5mdW5kaW5nID0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyB1dGlscy5yZXF1aXJlX3BheW1lbnQod2hvOiBieXRlcykgLT4gdWludDY0OgpyZXF1aXJlX3BheW1lbnQ6CiAgICAvLyBzcmMvdXRpbHMucHk6MTEtMTkKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IHJlcXVpcmVfcGF5bWVudCAoaW50ZXJuYWwpCiAgICAvLyAjIGFyZ3VtZW50czogTm9uZQogICAgLy8gIyBwdXJwb3NlOiBjaGVjayBwYXltZW50CiAgICAvLyAjIHByZS1jb25kaXRpb25zOiBOb25lCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczogTm9uZQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiByZXF1aXJlX3BheW1lbnQod2hvOiBBY2NvdW50KSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIHNyYy91dGlscy5weToyMAogICAgLy8gcmVmX2dyb3VwX2luZGV4ID0gVHhuLmdyb3VwX2luZGV4CiAgICB0eG4gR3JvdXBJbmRleAogICAgLy8gc3JjL3V0aWxzLnB5OjIxCiAgICAvLyBhc3NlcnQgcmVmX2dyb3VwX2luZGV4ID4gMCwgImdyb3VwIGluZGV4IGdyZWF0ZXIgdGhhbiB6ZXJvIgogICAgZHVwCiAgICBhc3NlcnQgLy8gZ3JvdXAgaW5kZXggZ3JlYXRlciB0aGFuIHplcm8KICAgIC8vIHNyYy91dGlscy5weToyMgogICAgLy8gcGF5bWVudF9ncm91cF9pbmRleCA9IHJlZl9ncm91cF9pbmRleCAtIDEKICAgIGludCAxCiAgICAtCiAgICAvLyBzcmMvdXRpbHMucHk6MjMKICAgIC8vIGFzc2VydCBndHhuLlBheW1lbnRUcmFuc2FjdGlvbihwYXltZW50X2dyb3VwX2luZGV4KS5zZW5kZXIgPT0gd2hvLCAicGF5bWVudCBzZW5kZXIgYWNjdXJhdGUiCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICBkdXAKICAgIGd0eG5zIFNlbmRlcgogICAgZnJhbWVfZGlnIC0xCiAgICA9PQogICAgYXNzZXJ0IC8vIHBheW1lbnQgc2VuZGVyIGFjY3VyYXRlCiAgICAvLyBzcmMvdXRpbHMucHk6MjQKICAgIC8vIGFzc2VydCBndHhuLlBheW1lbnRUcmFuc2FjdGlvbihwYXltZW50X2dyb3VwX2luZGV4KS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLCAicGF5bWVudCByZWNlaXZlciBhY2N1cmF0ZSIKICAgIGR1cAogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIHBheW1lbnQgcmVjZWl2ZXIgYWNjdXJhdGUKICAgIC8vIHNyYy91dGlscy5weToyNQogICAgLy8gcmV0dXJuIGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKHBheW1lbnRfZ3JvdXBfaW5kZXgpLmFtb3VudAogICAgZ3R4bnMgQW1vdW50CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5FYXJseVN0YWtlUmV3YXJkLndpdGhkcmF3KGFtb3VudDogYnl0ZXMpIC0+IHVpbnQ2NDoKd2l0aGRyYXc6CiAgICAvLyBzcmMvY29udHJhY3QucHk6OTk2LTEwMTMKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IHdpdGhkcmF3IChvdmVycmlkZSkKICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIGFtb3VudAogICAgLy8gIyByZXR1cm5zOiBtaW4gYmFsYW5jZQogICAgLy8gIyBwdXJwb3NlOiBleHRyYWN0IGZ1bmRzIGZyb20gY29udHJhY3QKICAgIC8vICMgcHJlLWNvbmRpdGlvbnMKICAgIC8vICMgLSBvbmx5IGNhbGxhYmxlIGJ5IG93bmVyCiAgICAvLyAjIC0gbGV0IGJhbGFuY2UgYmUgdGhlIGN1cnJlbnQgYmFsYW5jZSBvZiB0aGUKICAgIC8vICMgICBjb250cmFjdAogICAgLy8gIyAtIGJhbGFuY2UgLSBhbW91bnQgPj0gbWluX2JhbGFuY2UKICAgIC8vICMgICAoZmVlIHBhaWQgaW4gYXBwbCB0eG4pCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSB0cmFuc2ZlciBhbW91bnQgZnJvbSB0aGUgY29udHJhY3QgYWNjb3VudAogICAgLy8gIyAgIHRvIG93bmVyCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiB3aXRoZHJhdyhzZWxmLCBhbW91bnQ6IGFyYzQuVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIGJ5dGUgIiIKICAgIGR1cG4gMgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjEwMTQtMTAxNQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTEKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkgICAgICAgICAgICAgIyB6ZXJvIGFkZHJlc3MKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjEwMTQtMTAxNQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vd25lciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBvd25lcgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjEwMTYtMTAxNwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBpZiBzZWxmLmZ1bmRpbmcgPiAwOgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weToyNTAKICAgIC8vIHNlbGYuZnVuZGluZyA9IFVJbnQ2NCgpICAgICAgICAgICAgIyAwCiAgICBieXRlICJmdW5kaW5nIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjEwMTYtMTAxNwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBpZiBzZWxmLmZ1bmRpbmcgPiAwOgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRpbmcgZXhpc3RzCiAgICBieiB3aXRoZHJhd19lbHNlX2JvZHlANQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjEwMTgKICAgIC8vIG1pbl9iYWxhbmNlID0gc2VsZi5jYWxjdWxhdGVfbWluX2JhbGFuY2UoKQogICAgY2FsbHN1YiBjYWxjdWxhdGVfbWluX2JhbGFuY2UKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTAxOQogICAgLy8gYXZhaWxhYmxlX2JhbGFuY2UgPSBnZXRfYXZhaWxhYmxlX2JhbGFuY2UoKQogICAgY2FsbHN1YiBnZXRfYXZhaWxhYmxlX2JhbGFuY2UKICAgIC8vIHNyYy9jb250cmFjdC5weToxMDIwCiAgICAvLyBhc3NlcnQgYXZhaWxhYmxlX2JhbGFuY2UgLSBhbW91bnQubmF0aXZlID49IG1pbl9iYWxhbmNlLCAiYmFsYW5jZSBhdmFpbGFibGUiCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAtCiAgICA8PQogICAgYXNzZXJ0IC8vIGJhbGFuY2UgYXZhaWxhYmxlCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTAyMQogICAgLy8gaWYgYW1vdW50ID4gMDoKICAgIGZyYW1lX2RpZyAtMQogICAgYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGI+CiAgICBieiB3aXRoZHJhd19hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNyYy9jb250cmFjdC5weToxMDIyLTEwMjYKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICBhbW91bnQ9YW1vdW50Lm5hdGl2ZSwKICAgIC8vICAgICByZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgLy8gICAgIGZlZT0wCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTAyNAogICAgLy8gcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIHR4biBTZW5kZXIKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAxCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjEwMjIKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIGludCBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNyYy9jb250cmFjdC5weToxMDI1CiAgICAvLyBmZWU9MAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTAyMi0xMDI2CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgYW1vdW50PWFtb3VudC5uYXRpdmUsCiAgICAvLyAgICAgcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBmZWU9MAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKCndpdGhkcmF3X2FmdGVyX2lmX2Vsc2VANDoKICAgIC8vIHNyYy9jb250cmFjdC5weToxMDI3CiAgICAvLyByZXR1cm4gbWluX2JhbGFuY2UKICAgIHJldHN1YgoKd2l0aGRyYXdfZWxzZV9ib2R5QDU6CiAgICAvLyBzcmMvY29udHJhY3QucHk6MTAyOQogICAgLy8gbWluX2JhbGFuY2UgPSBzZWxmLmluaXRpYWwKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6MjUyCiAgICAvLyBzZWxmLmluaXRpYWwgPSBVSW50NjQoKSAgICAgICAgICAgICMgMAogICAgYnl0ZSAiaW5pdGlhbCIKICAgIC8vIHNyYy9jb250cmFjdC5weToxMDI5CiAgICAvLyBtaW5fYmFsYW5jZSA9IHNlbGYuaW5pdGlhbAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIHN3YXAKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfYnVyeSAwCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5pbml0aWFsIGV4aXN0cwogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjEwMzAKICAgIC8vIGF2YWlsYWJsZV9iYWxhbmNlID0gZ2V0X2F2YWlsYWJsZV9iYWxhbmNlKCkKICAgIGNhbGxzdWIgZ2V0X2F2YWlsYWJsZV9iYWxhbmNlCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTAzMQogICAgLy8gYXNzZXJ0IGF2YWlsYWJsZV9iYWxhbmNlIC0gYW1vdW50Lm5hdGl2ZSA+PSBtaW5fYmFsYW5jZSwgImJhbGFuY2UgYXZhaWxhYmxlIgogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMgogICAgLQogICAgPD0KICAgIGFzc2VydCAvLyBiYWxhbmNlIGF2YWlsYWJsZQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjEwMzIKICAgIC8vIGlmIGFtb3VudCA+IDA6CiAgICBmcmFtZV9kaWcgLTEKICAgIGJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCiAgICBiPgogICAgYnogd2l0aGRyYXdfYWZ0ZXJfaWZfZWxzZUA4CiAgICAvLyBzcmMvY29udHJhY3QucHk6MTAzMy0xMDM3CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgYW1vdW50PWFtb3VudC5uYXRpdmUsCiAgICAvLyAgICAgcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBmZWU9MAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjEwMzUKICAgIC8vIHJlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICBmcmFtZV9kaWcgMgogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIC8vIHNyYy9jb250cmFjdC5weToxMDMzCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICBpbnQgcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTAzNgogICAgLy8gZmVlPTAKICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjEwMzMtMTAzNwogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIGFtb3VudD1hbW91bnQubmF0aXZlLAogICAgLy8gICAgIHJlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgZmVlPTAKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0Cgp3aXRoZHJhd19hZnRlcl9pZl9lbHNlQDg6CiAgICAvLyBzcmMvY29udHJhY3QucHk6MTAzOAogICAgLy8gcmV0dXJuIG1pbl9iYWxhbmNlCiAgICByZXRzdWIKCgovLyBjb250cmFjdC5Mb2NrYWJsZS5jYWxjdWxhdGVfbWluX2JhbGFuY2UoKSAtPiB1aW50NjQ6CmNhbGN1bGF0ZV9taW5fYmFsYW5jZToKICAgIC8vIHNyYy9jb250cmFjdC5weTozMzgtMzUzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiBtaW5fYmFsYW5jZSAoaW50ZXJuYWwpCiAgICAvLyAjIGFyZ3VtZW50czogTm9uZQogICAgLy8gIyBwdXJwb3NlOiBjYWxjdWFsdGUgbWluaW11bSBiYWxhbmNlCiAgICAvLyAjIHByZS1jb25kaXRpb25zOiBOb25lCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczogTm9uZQogICAgLy8gIyBub3RlczoKICAgIC8vICMgLSBsZXQgcGVyaW9kID0gbnVtYmVyIG9mIG1vbnRocyB0byB0byBsb2NrdXAKICAgIC8vICMgICAgICAgdG90YWwgPSB0b3RhbCBhbW91bnQgaW50aWFsbHkgZnVuZGVkIChhaXJkcm9wICsgbG9ja3VwIGJvbnVzKQogICAgLy8gIyAgICAgICB5ID0gdmVzdGluZyBkZWxheSBpbiBtb250aHMKICAgIC8vICMgICAgICAgcCA9IDEgLyAoc2VsZi5wZXJpb2QgeCAxMikgb3IgMSAvIChwZXJpb2QpCiAgICAvLyAjIC0gbWltdW11bSBiYWxhbmNlID0KICAgIC8vICMgICAgIHRvdGFsIHggbWluKDEsIHAgeCBtYXgoMCwgKHBlcmlvZCAtIChub3coKSAtIGZ1bmRpbmcgKyB5IHggc2Vjb25kcy1pbi1tb250aCkpIC8gc2Vjb25kcy1pbi1tb250aCkpCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGNhbGN1bGF0ZV9taW5fYmFsYW5jZShzZWxmKSAtPiBVSW50NjQ6CiAgICBwcm90byAwIDEKICAgIC8vIHNyYy9jb250cmFjdC5weTozNTQKICAgIC8vIG5vdzogVUludDY0ID0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIC8vIHNyYy9jb250cmFjdC5weTozNTUKICAgIC8vIHZlc3RpbmdfZGVsYXk6IFVJbnQ2NCA9IHNlbGYudmVzdGluZ19kZWxheQogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weToyNTkKICAgIC8vIHNlbGYudmVzdGluZ19kZWxheSA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oIlZFU1RJTkdfREVMQVkiKSAgICMgZXgpIDEyCiAgICBieXRlICJ2ZXN0aW5nX2RlbGF5IgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM1NQogICAgLy8gdmVzdGluZ19kZWxheTogVUludDY0ID0gc2VsZi52ZXN0aW5nX2RlbGF5CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudmVzdGluZ19kZWxheSBleGlzdHMKICAgIC8vIHNyYy9jb250cmFjdC5weTozNTYKICAgIC8vIHBlcmlvZF9zZWNvbmRzOiBVSW50NjQgPSBzZWxmLnBlcmlvZF9zZWNvbmRzCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI1NwogICAgLy8gc2VsZi5wZXJpb2Rfc2Vjb25kcyA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oIlBFUklPRF9TRUNPTkRTIikgIyBleCkgMjU5MjAwMAogICAgYnl0ZSAicGVyaW9kX3NlY29uZHMiCiAgICAvLyBzcmMvY29udHJhY3QucHk6MzU2CiAgICAvLyBwZXJpb2Rfc2Vjb25kczogVUludDY0ID0gc2VsZi5wZXJpb2Rfc2Vjb25kcwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnBlcmlvZF9zZWNvbmRzIGV4aXN0cwogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM1NwogICAgLy8gbG9ja3VwX2RlbGF5OiBVSW50NjQgPSBzZWxmLmxvY2t1cF9kZWxheQogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weToyNTgKICAgIC8vIHNlbGYubG9ja3VwX2RlbGF5ID0gVGVtcGxhdGVWYXJbVUludDY0XSgiTE9DS1VQX0RFTEFZIikgICAgICMgZXgpIDEyCiAgICBieXRlICJsb2NrdXBfZGVsYXkiCiAgICAvLyBzcmMvY29udHJhY3QucHk6MzU3CiAgICAvLyBsb2NrdXBfZGVsYXk6IFVJbnQ2NCA9IHNlbGYubG9ja3VwX2RlbGF5CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubG9ja3VwX2RlbGF5IGV4aXN0cwogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM2MwogICAgLy8gc2VsZi5wZXJpb2QsCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI0OQogICAgLy8gc2VsZi5wZXJpb2QgPSBVSW50NjQoKSAgICAgICAgICAgICAjIDAKICAgIGJ5dGUgInBlcmlvZCIKICAgIC8vIHNyYy9jb250cmFjdC5weTozNjMKICAgIC8vIHNlbGYucGVyaW9kLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnBlcmlvZCBleGlzdHMKICAgIC8vIHNyYy9jb250cmFjdC5weTozNjQKICAgIC8vIHNlbGYuZnVuZGluZywKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6MjUwCiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBVSW50NjQoKSAgICAgICAgICAgICMgMAogICAgYnl0ZSAiZnVuZGluZyIKICAgIC8vIHNyYy9jb250cmFjdC5weTozNjQKICAgIC8vIHNlbGYuZnVuZGluZywKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kaW5nIGV4aXN0cwogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM2NQogICAgLy8gc2VsZi50b3RhbAogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weToyNTEKICAgIC8vIHNlbGYudG90YWwgPSBVSW50NjQoKSAgICAgICAgICAgICAgIyAwCiAgICBieXRlICJ0b3RhbCIKICAgIC8vIHNyYy9jb250cmFjdC5weTozNjUKICAgIC8vIHNlbGYudG90YWwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbCBleGlzdHMKICAgIC8vIHNyYy9jb250cmFjdC5weTozNTgtMzY2CiAgICAvLyBtaW5fYmFsYW5jZTogVUludDY0ID0gY2FsY3VsYXRlX21hYl9wdXJlKAogICAgLy8gICAgIG5vdywKICAgIC8vICAgICB2ZXN0aW5nX2RlbGF5LAogICAgLy8gICAgIHBlcmlvZF9zZWNvbmRzLAogICAgLy8gICAgIGxvY2t1cF9kZWxheSwKICAgIC8vICAgICBzZWxmLnBlcmlvZCwKICAgIC8vICAgICBzZWxmLmZ1bmRpbmcsCiAgICAvLyAgICAgc2VsZi50b3RhbAogICAgLy8gKQogICAgY2FsbHN1YiBjYWxjdWxhdGVfbWFiX3B1cmUKICAgIC8vIHNyYy9jb250cmFjdC5weTozNjcKICAgIC8vIHJldHVybiBtaW5fYmFsYW5jZQogICAgcmV0c3ViCgoKLy8gY29udHJhY3RfbWFiLmNhbGN1bGF0ZV9tYWJfcHVyZShub3c6IHVpbnQ2NCwgdmVzdGluZ19kZWxheTogdWludDY0LCBwZXJpb2Rfc2Vjb25kczogdWludDY0LCBsb2NrdXBfZGVsYXk6IHVpbnQ2NCwgcGVyaW9kOiB1aW50NjQsIGZ1bmRpbmc6IHVpbnQ2NCwgdG90YWw6IHVpbnQ2NCkgLT4gdWludDY0OgpjYWxjdWxhdGVfbWFiX3B1cmU6CiAgICAvLyBzcmMvY29udHJhY3RfbWFiLnB5OjYtMjgKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IGNhbGN1bGF0ZV9tYWJfcHVyZSAoaW50ZXJuYWwpCiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBub3csIHRpbWVzdGFtcAogICAgLy8gIyAtIHZlc3RpbmdfZGVsYXksIGhvdyBtYW55IHBlcmlvZHMgaW4gdmVzdGluZwogICAgLy8gIyAtIHBlcmlvZF9zZWNvbmRzLCBob3cgbWFueSBzZWNvbmRzIGluIHBlcmlvZAogICAgLy8gIyAtIGxvY2t1cCBkZWxheSwgaG93IG1hbnkgcGVyaW9kIGluIGxvY2t1cAogICAgLy8gIyAtIHBlcmlvZCwgaG93IG1hbnkgcGVyaW9kcwogICAgLy8gIyAtIGZ1bmRpbmcsIHdoZW4gZnVuZGVkCiAgICAvLyAjIC0gdG90YWwsIGhvdyBtdWNoIGZ1bmRlZAogICAgLy8gIyBwdXJwb3NlOiBjYWxjdWxhdGUgbWluaW11bSBhbGxvd2FibGUgYmFsYW5jZQogICAgLy8gIyByZXR1cm5zJyBtaW5pbXVtIGFsbG93YWJsZSBiYWxhbmNlCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGNhbGN1bGF0ZV9tYWJfcHVyZSgKICAgIC8vICAgICBub3c6IFVJbnQ2NCwKICAgIC8vICAgICB2ZXN0aW5nX2RlbGF5OiBVSW50NjQsCiAgICAvLyAgICAgcGVyaW9kX3NlY29uZHM6IFVJbnQ2NCwKICAgIC8vICAgICBsb2NrdXBfZGVsYXk6IFVJbnQ2NCwKICAgIC8vICAgICBwZXJpb2Q6IFVJbnQ2NCwKICAgIC8vICAgICBmdW5kaW5nOiBVSW50NjQsCiAgICAvLyAgICAgdG90YWw6IFVJbnQ2NCwKICAgIC8vICkgLT4gVUludDY0OgogICAgcHJvdG8gNyAxCiAgICAvLyBzcmMvY29udHJhY3RfbWFiLnB5OjI5CiAgICAvLyBsb2NrdXBfcGVyaW9kcyA9IGxvY2t1cF9kZWxheSAqIHBlcmlvZAogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgLTMKICAgICoKICAgIC8vIHNyYy9jb250cmFjdF9tYWIucHk6MzAKICAgIC8vIGxvY2t1cF9zZWNvbmRzID0gbG9ja3VwX3BlcmlvZHMgKiBwZXJpb2Rfc2Vjb25kcwogICAgZnJhbWVfZGlnIC01CiAgICAqCiAgICAvLyBzcmMvY29udHJhY3RfbWFiLnB5OjMxCiAgICAvLyB2ZXN0aW5nX3NlY29uZHMgPSB2ZXN0aW5nX2RlbGF5ICogcGVyaW9kX3NlY29uZHMKICAgIGZyYW1lX2RpZyAtNgogICAgZnJhbWVfZGlnIC01CiAgICAqCiAgICBzd2FwCiAgICAvLyBzcmMvY29udHJhY3RfbWFiLnB5OjMyCiAgICAvLyBsb2NrZWRfdXAgPSBub3cgPCBmdW5kaW5nICsgbG9ja3VwX3NlY29uZHMKICAgIGZyYW1lX2RpZyAtMgogICAgKwogICAgZHVwCiAgICBjb3ZlciAyCiAgICBmcmFtZV9kaWcgLTcKICAgIGRpZyAxCiAgICA8CiAgICBzd2FwCiAgICAvLyBzcmMvY29udHJhY3RfbWFiLnB5OjMzCiAgICAvLyBmdWxseV92ZXN0ZWQgPSBub3cgPj0gZnVuZGluZyArIGxvY2t1cF9zZWNvbmRzICsgdmVzdGluZ19zZWNvbmRzCiAgICB1bmNvdmVyIDIKICAgICsKICAgIGZyYW1lX2RpZyAtNwogICAgPD0KICAgIHN3YXAKICAgIC8vIHNyYy9jb250cmFjdF9tYWIucHk6MzQKICAgIC8vIGlmIGxvY2tlZF91cDoKICAgIGJ6IGNhbGN1bGF0ZV9tYWJfcHVyZV9lbHNlX2JvZHlAMgogICAgLy8gc3JjL2NvbnRyYWN0X21hYi5weTozNQogICAgLy8gcmV0dXJuIHRvdGFsCiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpjYWxjdWxhdGVfbWFiX3B1cmVfZWxzZV9ib2R5QDI6CiAgICAvLyBzcmMvY29udHJhY3RfbWFiLnB5OjM2CiAgICAvLyBlbGlmIGZ1bGx5X3Zlc3RlZDoKICAgIGZyYW1lX2RpZyAxCiAgICBieiBjYWxjdWxhdGVfbWFiX3B1cmVfZWxzZV9ib2R5QDQKICAgIC8vIHNyYy9jb250cmFjdF9tYWIucHk6MzcKICAgIC8vIHJldHVybiBVSW50NjQoMCkKICAgIGludCAwCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKY2FsY3VsYXRlX21hYl9wdXJlX2Vsc2VfYm9keUA0OgogICAgLy8gc3JjL2NvbnRyYWN0X21hYi5weTozOQogICAgLy8gZWxhcHNlZF9wZXJpb2RzID0gKG5vdyAtIChmdW5kaW5nICsgbG9ja3VwX3NlY29uZHMpKSAvLyBwZXJpb2Rfc2Vjb25kcwogICAgZnJhbWVfZGlnIC03CiAgICBmcmFtZV9kaWcgMAogICAgLQogICAgZnJhbWVfZGlnIC01CiAgICAvCiAgICAvLyBzcmMvY29udHJhY3RfbWFiLnB5OjQwCiAgICAvLyByZXR1cm4gKHRvdGFsICogKHZlc3RpbmdfZGVsYXkgLSBlbGFwc2VkX3BlcmlvZHMpKSAvLyB2ZXN0aW5nX2RlbGF5CiAgICBmcmFtZV9kaWcgLTYKICAgIHN3YXAKICAgIC0KICAgIGZyYW1lX2RpZyAtMQogICAgKgogICAgZnJhbWVfZGlnIC02CiAgICAvCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKCi8vIHV0aWxzLmdldF9hdmFpbGFibGVfYmFsYW5jZSgpIC0+IHVpbnQ2NDoKZ2V0X2F2YWlsYWJsZV9iYWxhbmNlOgogICAgLy8gc3JjL3V0aWxzLnB5OjI3LTMzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiBnZXRfYXZhaWxhYmxlX2JhbGFuY2UgKGludGVybmFsKQogICAgLy8gIyBwdXJwb3NlOiBnZXQgYXZhaWxhYmxlIGJhbGFuY2UKICAgIC8vICMgcmV0dXJuczogYXBwIGJhbGFuY2UgYXZhaWxhYmxlIGZvciBzcGVuZGluZwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBnZXRfYXZhaWxhYmxlX2JhbGFuY2UoKSAtPiBVSW50NjQ6CiAgICBwcm90byAwIDEKICAgIC8vIHNyYy91dGlscy5weTozNAogICAgLy8gYmFsYW5jZSA9IG9wLmJhbGFuY2UoR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcykKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBiYWxhbmNlCiAgICAvLyBzcmMvdXRpbHMucHk6MzUKICAgIC8vIG1pbl9iYWxhbmNlID0gb3AuR2xvYmFsLm1pbl9iYWxhbmNlCiAgICBnbG9iYWwgTWluQmFsYW5jZQogICAgLy8gc3JjL3V0aWxzLnB5OjM2CiAgICAvLyBhdmFpbGFibGVfYmFsYW5jZSA9IGJhbGFuY2UgLSBtaW5fYmFsYW5jZQogICAgLQogICAgLy8gc3JjL3V0aWxzLnB5OjM3CiAgICAvLyByZXR1cm4gYXZhaWxhYmxlX2JhbGFuY2UKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LkFpcmRyb3BCcmlkZ2UuYXBwcm92ZV91cGRhdGUoYXBwcm92YWw6IGJ5dGVzKSAtPiB2b2lkOgphcHByb3ZlX3VwZGF0ZToKICAgIC8vIHNyYy9jb250cmFjdC5weTo1NjItNTczCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiBhcHByb3ZlX3VwZGF0ZQogICAgLy8gIyBhcmd1bWVudHM6CiAgICAvLyAjIC0gYXBwcm92YWwsIGFwcHJvdmFsIHN0YXR1cwogICAgLy8gIyBwdXJwb3NlOiBhcHByb3ZlIHVwZGF0ZQogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG9ubHkgY2FsbGFibGUgYnkgb3duZXIKICAgIC8vICMgcG9zdC1jb25kaXRpb25zOgogICAgLy8gIyAtIHVwZGF0YWJsZSBzZXQgdG8gYXBwcm92YWwKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGFwcHJvdmVfdXBkYXRlKHNlbGYsIGFwcHJvdmFsOiBhcmM0LkJvb2wpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo1NzQKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYub3duZXIsICJtdXN0IGJlIG93bmVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo1MQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKSAgICAgICAgICAgICAjIHplcm8gYWRkcmVzcwogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTc0CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vd25lciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBvd25lcgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU3NQogICAgLy8gc2VsZi51cGRhdGFibGUgPSBhcHByb3ZhbC5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDAKICAgIGdldGJpdAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE3NQogICAgLy8gc2VsZi51cGRhdGFibGUgPSBib29sKDEpICAgICAgICAgICAjIDEgKERlZmF1bHQgdW5sb2NrZWQpCiAgICBieXRlICJ1cGRhdGFibGUiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTc1CiAgICAvLyBzZWxmLnVwZGF0YWJsZSA9IGFwcHJvdmFsLm5hdGl2ZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LlN0YWtlYWJsZS5zZXRfZGVsZWdhdGUoZGVsZWdhdGU6IGJ5dGVzKSAtPiB2b2lkOgpzZXRfZGVsZWdhdGU6CiAgICAvLyBzcmMvY29udHJhY3QucHk6NzYtODYKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogc2V0X2RlbGVnYXRlCiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBkZWxlZ2F0ZSwgd2hvIGlzIHRoZSBkZWxlZ2F0ZQogICAgLy8gIyBwdXJwb3NlOiBzZXQgZGVsZWdhdGUKICAgIC8vICMgcHJlLWNvbmRpdGlvbnMKICAgIC8vICMgLSBvbmx5IGNhbGxhYmxlIGJ5IG93bmVyCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczogZGVsZWdhdGUgc2V0CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBzZXRfZGVsZWdhdGUoc2VsZiwgZGVsZWdhdGU6IGFyYzQuQWRkcmVzcykgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg3CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTEKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkgICAgICAgICAgICAgIyB6ZXJvIGFkZHJlc3MKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg3CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vd25lciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBvd25lcgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojc0CiAgICAvLyBzZWxmLmRlbGVnYXRlID0gQWNjb3VudCgpICAgICAgICAgICMgemVybyBhZGRyZXNzCiAgICBieXRlICJkZWxlZ2F0ZSIKICAgIC8vIHNyYy9jb250cmFjdC5weTo4OAogICAgLy8gc2VsZi5kZWxlZ2F0ZSA9IGRlbGVnYXRlLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuU3Rha2VhYmxlLnBhcnRpY2lwYXRlKHZvdGVfazogYnl0ZXMsIHNlbF9rOiBieXRlcywgdm90ZV9mc3Q6IGJ5dGVzLCB2b3RlX2xzdDogYnl0ZXMsIHZvdGVfa2Q6IGJ5dGVzLCBzcF9rZXk6IGJ5dGVzKSAtPiB2b2lkOgpwYXJ0aWNpcGF0ZToKICAgIC8vIHNyYy9jb250cmFjdC5weTo4OS0xMDkKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IHBhcnRpY2lwYXRlCiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBrZXkgcmVnaXN0cmF0aW9uIHBhcmFtcwogICAgLy8gIyBwdXJwb3NlOiBhbGxvdyBjb250cmFjdCB0byBwYXJ0aWNwYXRlCiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gbXVzdCBiZSBjYWxsYWJsZSBieSBvd25lciBvbmx5CiAgICAvLyAjIC0gbXVzdCBiZSBjb21iaW5lZCB3aXRoIHRyYW5zYWN0aW9uIHRyYW5zZmVyaW5nCiAgICAvLyAjICAgb25lIGZlZSBpbnRvIHRoZSBjb250cmFjdCBhY2NvdW50CiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSBjb250cmFjdCBnZW5lcmF0ZXMgaXRueCBmb3Iga2V5cmVnCiAgICAvLyAjIG5vdGVzOgogICAgLy8gIyAtIGZlZSBwYXltZW50IGlzIHRvIHByZXZlbnQgcG90ZW50aWFsIGRyYWluaW5nCiAgICAvLyAjICAgaW50byBmZWVzLCBldmVuIHRob3VnaCBpdCBpcyBub3QgbGlrZWx5IHRoYXQKICAgIC8vICMgICBhIHVzZXIgbWF5IGF0dGVtcHQgdG8gZHJhaW4gdGhlaXIgZnVuZHMKICAgIC8vICMgLSBtaW4gYmFsYW5jZSBpcyBub3QgcmVsZXZhbnQgZHVlIHRvIHRoZSBmZWUKICAgIC8vICMgICBwYXltZW50IGFkZGVkCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBwYXJ0aWNpcGF0ZShzZWxmLCB2b3RlX2s6IEJ5dGVzMzIsIHNlbF9rOiBCeXRlczMyLCB2b3RlX2ZzdDogYXJjNC5VSW50NjQsCiAgICAvLyAgICAgdm90ZV9sc3Q6IGFyYzQuVUludDY0LCB2b3RlX2tkOiBhcmM0LlVJbnQ2NCwgc3Bfa2V5OiBCeXRlczY0KSAtPiBOb25lOgogICAgcHJvdG8gNiAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTEwLTExMQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciBvciBUeG4uc2VuZGVyID09IHNlbGYuZGVsZWdhdGUsICJtdXN0IGJlIG93bmVyIG9yIGRlbGVnYXRlIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo1MQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKSAgICAgICAgICAgICAjIHplcm8gYWRkcmVzcwogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTEwLTExMQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciBvciBUeG4uc2VuZGVyID09IHNlbGYuZGVsZWdhdGUsICJtdXN0IGJlIG93bmVyIG9yIGRlbGVnYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgPT0KICAgIGJueiBwYXJ0aWNpcGF0ZV9ib29sX3RydWVAMgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo3NAogICAgLy8gc2VsZi5kZWxlZ2F0ZSA9IEFjY291bnQoKSAgICAgICAgICAjIHplcm8gYWRkcmVzcwogICAgYnl0ZSAiZGVsZWdhdGUiCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTEwLTExMQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciBvciBUeG4uc2VuZGVyID09IHNlbGYuZGVsZWdhdGUsICJtdXN0IGJlIG93bmVyIG9yIGRlbGVnYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRlbGVnYXRlIGV4aXN0cwogICAgPT0KICAgIGJ6IHBhcnRpY2lwYXRlX2Jvb2xfZmFsc2VAMwoKcGFydGljaXBhdGVfYm9vbF90cnVlQDI6CiAgICBpbnQgMQogICAgYiBwYXJ0aWNpcGF0ZV9ib29sX21lcmdlQDQKCnBhcnRpY2lwYXRlX2Jvb2xfZmFsc2VAMzoKICAgIGludCAwCgpwYXJ0aWNpcGF0ZV9ib29sX21lcmdlQDQ6CiAgICAvLyBzcmMvY29udHJhY3QucHk6MTEwLTExMQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciBvciBUeG4uc2VuZGVyID09IHNlbGYuZGVsZWdhdGUsICJtdXN0IGJlIG93bmVyIG9yIGRlbGVnYXRlIgogICAgYXNzZXJ0IC8vIG11c3QgYmUgb3duZXIgb3IgZGVsZWdhdGUKICAgIC8vIHNyYy9jb250cmFjdC5weToxMTItMTEzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBrZXlfcmVnX2ZlZSA9IEdsb2JhbC5taW5fdHhuX2ZlZQogICAgZ2xvYmFsIE1pblR4bkZlZQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjExNC0xMTUKICAgIC8vICMgcmVxdWlyZSBwYXltZW50IG9mIG1pbiBmZWUgdG8gcHJldmVudCBkcmFpbmluZwogICAgLy8gYXNzZXJ0IHJlcXVpcmVfcGF5bWVudChUeG4uc2VuZGVyKSA9PSBrZXlfcmVnX2ZlZSwgInBheW1lbnQgYW1vdXQgYWNjdXJhdGUiCiAgICB0eG4gU2VuZGVyCiAgICBjYWxsc3ViIHJlcXVpcmVfcGF5bWVudAogICAgZGlnIDEKICAgID09CiAgICBhc3NlcnQgLy8gcGF5bWVudCBhbW91dCBhY2N1cmF0ZQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjExNi0xMjUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGl0eG4uS2V5UmVnaXN0cmF0aW9uKAogICAgLy8gICAgIHZvdGVfa2V5PXZvdGVfay5ieXRlcywKICAgIC8vICAgICBzZWxlY3Rpb25fa2V5PXNlbF9rLmJ5dGVzLAogICAgLy8gICAgIHZvdGVfZmlyc3Q9dm90ZV9mc3QubmF0aXZlLAogICAgLy8gICAgIHZvdGVfbGFzdD12b3RlX2xzdC5uYXRpdmUsCiAgICAvLyAgICAgdm90ZV9rZXlfZGlsdXRpb249dm90ZV9rZC5uYXRpdmUsCiAgICAvLyAgICAgc3RhdGVfcHJvb2Zfa2V5PXNwX2tleS5ieXRlcywKICAgIC8vICAgICBmZWU9a2V5X3JlZ19mZWUKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNyYy9jb250cmFjdC5weToxMjAKICAgIC8vIHZvdGVfZmlyc3Q9dm90ZV9mc3QubmF0aXZlLAogICAgZnJhbWVfZGlnIC00CiAgICBidG9pCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTIxCiAgICAvLyB2b3RlX2xhc3Q9dm90ZV9sc3QubmF0aXZlLAogICAgZnJhbWVfZGlnIC0zCiAgICBidG9pCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTIyCiAgICAvLyB2b3RlX2tleV9kaWx1dGlvbj12b3RlX2tkLm5hdGl2ZSwKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIFN0YXRlUHJvb2ZQSwogICAgaXR4bl9maWVsZCBWb3RlS2V5RGlsdXRpb24KICAgIGl0eG5fZmllbGQgVm90ZUxhc3QKICAgIGl0eG5fZmllbGQgVm90ZUZpcnN0CiAgICBmcmFtZV9kaWcgLTUKICAgIGl0eG5fZmllbGQgU2VsZWN0aW9uUEsKICAgIGZyYW1lX2RpZyAtNgogICAgaXR4bl9maWVsZCBWb3RlUEsKICAgIC8vIHNyYy9jb250cmFjdC5weToxMTYtMTE3CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBpdHhuLktleVJlZ2lzdHJhdGlvbigKICAgIGludCBrZXlyZWcKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTE2LTEyNQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gaXR4bi5LZXlSZWdpc3RyYXRpb24oCiAgICAvLyAgICAgdm90ZV9rZXk9dm90ZV9rLmJ5dGVzLAogICAgLy8gICAgIHNlbGVjdGlvbl9rZXk9c2VsX2suYnl0ZXMsCiAgICAvLyAgICAgdm90ZV9maXJzdD12b3RlX2ZzdC5uYXRpdmUsCiAgICAvLyAgICAgdm90ZV9sYXN0PXZvdGVfbHN0Lm5hdGl2ZSwKICAgIC8vICAgICB2b3RlX2tleV9kaWx1dGlvbj12b3RlX2tkLm5hdGl2ZSwKICAgIC8vICAgICBzdGF0ZV9wcm9vZl9rZXk9c3Bfa2V5LmJ5dGVzLAogICAgLy8gICAgIGZlZT1rZXlfcmVnX2ZlZQogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LlVwZ3JhZGVhYmxlLnNldF92ZXJzaW9uKGNvbnRyYWN0X3ZlcnNpb246IGJ5dGVzLCBkZXBsb3ltZW50X3ZlcnNpb246IGJ5dGVzKSAtPiB2b2lkOgpzZXRfdmVyc2lvbjoKICAgIC8vIHNyYy9jb250cmFjdC5weToxNzYtMTg4CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiBzZXRfdmVyc2lvbgogICAgLy8gIyBhcmd1bWVudHM6CiAgICAvLyAjIC0gY29udHJhY3RfdmVyc2lvbiwgY29udHJhY3QgdmVyc2lvbgogICAgLy8gIyAtIGRlcGxveW1lbnRfdmVyc2lvbiwgZGVwbG95bWVudCB2ZXJzaW9uCiAgICAvLyAjIHB1cnBvc2U6IHNldCB2ZXJzaW9uCiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gb25seSBjYWxsYWJsZSBieSBjcmVhdG9yCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSBjb250cmFjdF92ZXJzaW9uIGFuZCBkZXBsb3ltZW50X3ZlcnNpb24gc2V0CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBzZXRfdmVyc2lvbihzZWxmLCBjb250cmFjdF92ZXJzaW9uOiBhcmM0LlVJbnQ2NCwgZGVwbG95bWVudF92ZXJzaW9uOiBhcmM0LlVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE4OQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgIm11c3QgYmUgY3JlYXRvciIKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIGNyZWF0b3IKICAgIC8vIHNyYy9jb250cmFjdC5weToxOTAKICAgIC8vIHNlbGYuY29udHJhY3RfdmVyc2lvbiA9IGNvbnRyYWN0X3ZlcnNpb24ubmF0aXZlCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIC8vIHNyYy9jb250cmFjdC5weToxNzMKICAgIC8vIHNlbGYuY29udHJhY3RfdmVyc2lvbiA9IFVJbnQ2NCgpICAgIyAwCiAgICBieXRlICJjb250cmFjdF92ZXJzaW9uIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE5MAogICAgLy8gc2VsZi5jb250cmFjdF92ZXJzaW9uID0gY29udHJhY3RfdmVyc2lvbi5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6MTkxCiAgICAvLyBzZWxmLmRlcGxveW1lbnRfdmVyc2lvbiA9IGRlcGxveW1lbnRfdmVyc2lvbi5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE3NAogICAgLy8gc2VsZi5kZXBsb3ltZW50X3ZlcnNpb24gPSBVSW50NjQoKSAjIDAKICAgIGJ5dGUgImRlcGxveW1lbnRfdmVyc2lvbiIKICAgIC8vIHNyYy9jb250cmFjdC5weToxOTEKICAgIC8vIHNlbGYuZGVwbG95bWVudF92ZXJzaW9uID0gZGVwbG95bWVudF92ZXJzaW9uLm5hdGl2ZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LkxvY2thYmxlLmNsb3NlKCkgLT4gdm9pZDoKY2xvc2U6CiAgICAvLyBzcmMvY29udHJhY3QucHk6Mjk1LTMxMAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogY2xvc2UKICAgIC8vICMgcHVycG9zZTogZGVsZXRlcyBjb250cmFjdAogICAgLy8gIyBwcmUtY29uZGl0aW9uczoKICAgIC8vICMgLSBtaW4gYmFsYW5jZSBpcyAwCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSBjb250cmFjdCBpcyBkZWxldGVkCiAgICAvLyAjIC0gYWNjb3VudCBjbG9zZWQgb3V0IHRvIG93bmVyIGlmIGl0IGhhcyBhIGJhbGFuY2UKICAgIC8vICMgbm90ZXM6CiAgICAvLyAjIC0gc2hvdWxkIGJlIGFsbGVkIHdpdGggb25Db21wbGV0aW9uCiAgICAvLyAjICAgZGVsZXRlQXBwbGljYXRpb24KICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsKICAgIC8vICAgICBPbkNvbXBsZXRlQWN0aW9uLkRlbGV0ZUFwcGxpY2F0aW9uCiAgICAvLyBdKQogICAgLy8gZGVmIGNsb3NlKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNyYy9jb250cmFjdC5weTozMTEtMzEyCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kaW5nID4gMCwgImZ1bmRpbmcgaW5pdGlhbGl6ZWQiCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI1MAogICAgLy8gc2VsZi5mdW5kaW5nID0gVUludDY0KCkgICAgICAgICAgICAjIDAKICAgIGJ5dGUgImZ1bmRpbmciCiAgICAvLyBzcmMvY29udHJhY3QucHk6MzExLTMxMgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGluZyA+IDAsICJmdW5kaW5nIGluaXRpYWxpemVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRpbmcgZXhpc3RzCiAgICBhc3NlcnQgLy8gZnVuZGluZyBpbml0aWFsaXplZAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjMxMy0zMTQKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLmNhbGN1bGF0ZV9taW5fYmFsYW5jZSgpID09IDAsICJtaW4gYmFsYW5jZSBub3QgemVybyIKICAgIGNhbGxzdWIgY2FsY3VsYXRlX21pbl9iYWxhbmNlCiAgICAhCiAgICBhc3NlcnQgLy8gbWluIGJhbGFuY2Ugbm90IHplcm8KICAgIC8vIHNyYy9jb250cmFjdC5weTozMTUtMzE2CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTEKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkgICAgICAgICAgICAgIyB6ZXJvIGFkZHJlc3MKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjMxNS0zMTYKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYub3duZXIsICJtdXN0IGJlIG93bmVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIG93bmVyCiAgICAvLyBzcmMvY29udHJhY3QucHk6MzE3LTMxOAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gb2NhID0gVHhuLm9uX2NvbXBsZXRpb24KICAgIHR4biBPbkNvbXBsZXRpb24KICAgIC8vIHNyYy9jb250cmFjdC5weTozMTkKICAgIC8vIGlmIG9jYSA9PSBPbkNvbXBsZXRlQWN0aW9uLkRlbGV0ZUFwcGxpY2F0aW9uOgogICAgaW50IERlbGV0ZUFwcGxpY2F0aW9uCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzcmMvY29udHJhY3QucHk6MzMxCiAgICAvLyByZWNlaXZlcj1zZWxmLm93bmVyLAogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo1MQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKSAgICAgICAgICAgICAjIHplcm8gYWRkcmVzcwogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6MzMxCiAgICAvLyByZWNlaXZlcj1zZWxmLm93bmVyLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjMzMgogICAgLy8gY2xvc2VfcmVtYWluZGVyX3RvPXNlbGYub3duZXIsCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpICAgICAgICAgICAgICMgemVybyBhZGRyZXNzCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9jb250cmFjdC5weTozMzIKICAgIC8vIGNsb3NlX3JlbWFpbmRlcl90bz1zZWxmLm93bmVyLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjMzNQogICAgLy8gaXR4bi5zdWJtaXRfdHhucyhrZXlyZWdfdHhuLCBwbXRfdHhuKQogICAgaXR4bl9iZWdpbgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjMyNwogICAgLy8gc3RhdGVfcHJvb2Zfa2V5PUJ5dGVzLmZyb21fYmFzZTY0KCJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT09IiksCiAgICBieXRlIGJhc2U2NCBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT09CiAgICBpdHhuX2ZpZWxkIFN0YXRlUHJvb2ZQSwogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjMyNgogICAgLy8gdm90ZV9rZXlfZGlsdXRpb249VUludDY0KDApLAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgVm90ZUtleURpbHV0aW9uCiAgICAvLyBzcmMvY29udHJhY3QucHk6MzI1CiAgICAvLyB2b3RlX2xhc3Q9VUludDY0KDApLAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgVm90ZUxhc3QKICAgIC8vIHNyYy9jb250cmFjdC5weTozMjQKICAgIC8vIHZvdGVfZmlyc3Q9VUludDY0KDApLAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgVm90ZUZpcnN0CiAgICAvLyBzcmMvY29udHJhY3QucHk6MzIzCiAgICAvLyBzZWxlY3Rpb25fa2V5PUJ5dGVzLmZyb21fYmFzZTY0KCJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPSIpLAogICAgYnl0ZSBiYXNlNjQgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT0KICAgIGl0eG5fZmllbGQgU2VsZWN0aW9uUEsKICAgIC8vIHNyYy9jb250cmFjdC5weTozMjIKICAgIC8vIHZvdGVfa2V5PUJ5dGVzLmZyb21fYmFzZTY0KCJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPSIpLAogICAgYnl0ZSBiYXNlNjQgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT0KICAgIGl0eG5fZmllbGQgVm90ZVBLCiAgICAvLyBzcmMvY29udHJhY3QucHk6MzIxCiAgICAvLyBub25fcGFydGljaXBhdGlvbj1UcnVlLAogICAgaW50IDEKICAgIGl0eG5fZmllbGQgTm9ucGFydGljaXBhdGlvbgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjMyMAogICAgLy8ga2V5cmVnX3R4biA9IGl0eG4uS2V5UmVnaXN0cmF0aW9uKAogICAgaW50IGtleXJlZwogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjMyOAogICAgLy8gZmVlPTAKICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjMzNQogICAgLy8gaXR4bi5zdWJtaXRfdHhucyhrZXlyZWdfdHhuLCBwbXRfdHhuKQogICAgaXR4bl9uZXh0CiAgICBpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIC8vIHNyYy9jb250cmFjdC5weTozMzAKICAgIC8vIHBtdF90eG4gPSBpdHhuLlBheW1lbnQoCiAgICBpbnQgcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzcmMvY29udHJhY3QucHk6MzMzCiAgICAvLyBmZWU9MAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzcmMvY29udHJhY3QucHk6MzM1CiAgICAvLyBpdHhuLnN1Ym1pdF90eG5zKGtleXJlZ190eG4sIHBtdF90eG4pCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuT3duYWJsZS50cmFuc2ZlcihuZXdfb3duZXI6IGJ5dGVzKSAtPiB2b2lkOgp0cmFuc2ZlcjoKICAgIC8vIHNyYy9jb250cmFjdC5weTo1Mi02MwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogdHJhbnNmZXIKICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIG5ld19vd25lciwgbmV3IG93bmVyCiAgICAvLyAjIHB1cnBvc2U6IGNoYW5nZSBvd25lcgogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG9ubHkgY2FsbGFibGUgYnkgdGhlIG93bmVyCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSBuZXcgb3duZXIgYXNpZ25lZAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgdHJhbnNmZXIoc2VsZiwgbmV3X293bmVyOiBhcmM0LkFkZHJlc3MpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo2NAogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciwgIm11c3QgYmUgb3duZXIiCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpICAgICAgICAgICAgICMgemVybyBhZGRyZXNzCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9jb250cmFjdC5weTo2NAogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciwgIm11c3QgYmUgb3duZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgb3duZXIKICAgIC8vIHNyYy9jb250cmFjdC5weTo1MQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKSAgICAgICAgICAgICAjIHplcm8gYWRkcmVzcwogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjUKICAgIC8vIHNlbGYub3duZXIgPSBuZXdfb3duZXIubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5FYXJseVN0YWtlUmV3YXJkLm9uX2NyZWF0ZSgpIC0+IHZvaWQ6Cm9uX2NyZWF0ZToKICAgIC8vIHNyYy9jb250cmFjdC5weTo5MDUtOTE5CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiBvbl9jcmVhdGUKICAgIC8vICMgYXJndW1lbnRzOiBOb25lCiAgICAvLyAjIHB1cnBvc2U6IEhhbmRsZXMgYWN0aW9ucyByZXF1aXJlZCBkdXJpbmcgdGhlCiAgICAvLyAjICAgICAgICAgIGNyZWF0aW9uIG9mIHRoZSBjb250cmFjdC4KICAgIC8vICMgcHJlLWNvbmRpdGlvbnMKICAgIC8vICMgLSBvbmx5IGNhbGxhYmxlIGJ5IENyZWF0ZUFwcGxpY2F0aW9uCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSBwYXJlbnRfaWQgc2V0IHRvIGNhbGxlcl9hcHBsaWNhdGlvbl9pZAogICAgLy8gIyBkZXRhaWxzOgogICAgLy8gIyAtIEVuc3VyZXMgdGhhdCB0aGUgY29udHJhY3QgaXMgY3JlYXRlZCBieSBhCiAgICAvLyAjICAgZmFjdG9yeSwgdmFsaWRhdGluZyB0aGUgY2FsbGVyX2FwcGxpY2F0aW9uX2lkLgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChjcmVhdGU9InJlcXVpcmUiKQogICAgLy8gZGVmIG9uX2NyZWF0ZShzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTIwCiAgICAvLyBjYWxsZXJfaWQgPSBHbG9iYWwuY2FsbGVyX2FwcGxpY2F0aW9uX2lkCiAgICBnbG9iYWwgQ2FsbGVyQXBwbGljYXRpb25JRAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjkyMQogICAgLy8gYXNzZXJ0IGNhbGxlcl9pZCA+IDAsICJtdXN0IGJlIGNyZWF0ZWQgYnkgZmFjdG9yeSIKICAgIGR1cAogICAgYXNzZXJ0IC8vIG11c3QgYmUgY3JlYXRlZCBieSBmYWN0b3J5CiAgICAvLyBzcmMvY29udHJhY3QucHk6MjU0LTI1NQogICAgLy8gIyBjb2xkIHN0YXRlCiAgICAvLyBzZWxmLnBhcmVudF9pZCA9IFVJbnQ2NCgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIDAKICAgIGJ5dGUgInBhcmVudF9pZCIKICAgIC8vIHNyYy9jb250cmFjdC5weTo5MjIKICAgIC8vIHNlbGYucGFyZW50X2lkID0gY2FsbGVyX2lkCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuVXBncmFkZWFibGUub25fdXBkYXRlKCkgLT4gdm9pZDoKb25fdXBkYXRlOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE5Mi0yMDMKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IG9uX3VwZGF0ZQogICAgLy8gIyBhcmd1bWVudHM6IE5vbmUKICAgIC8vICMgcHVycG9zZTogb24gdXBkYXRlCiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gb25seSBjYWxsYWJsZSBieSBjcmVhdG9yCiAgICAvLyAjIC0gdXBkYXRhYmxlIG11c3QgYmUgdHJ1ZQogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gTm9uZQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVsiVXBkYXRlQXBwbGljYXRpb24iXSkKICAgIC8vIGRlZiBvbl91cGRhdGUoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjIwNC0yMDcKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBXQVJOSU5HOiBUaGlzIGFwcCBjYW4gYmUgdXBkYXRlZCBieSB0aGUgY3JlYXRvcgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzLCAibXVzdCBiZSBjcmVhdG9yIgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgY3JlYXRvcgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjIwOAogICAgLy8gYXNzZXJ0IHNlbGYudXBkYXRhYmxlID09IFVJbnQ2NCgxKSwgIm5vdCBhcHByb3ZlZCIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTc1CiAgICAvLyBzZWxmLnVwZGF0YWJsZSA9IGJvb2woMSkgICAgICAgICAgICMgMSAoRGVmYXVsdCB1bmxvY2tlZCkKICAgIGJ5dGUgInVwZGF0YWJsZSIKICAgIC8vIHNyYy9jb250cmFjdC5weToyMDgKICAgIC8vIGFzc2VydCBzZWxmLnVwZGF0YWJsZSA9PSBVSW50NjQoMSksICJub3QgYXBwcm92ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXBkYXRhYmxlIGV4aXN0cwogICAgaW50IDEKICAgID09CiAgICBhc3NlcnQgLy8gbm90IGFwcHJvdmVkCiAgICByZXRzdWIKCgovLyBjb250cmFjdC5FYXJseVN0YWtlUmV3YXJkLl9faW5pdF9fKCkgLT4gdm9pZDoKX19pbml0X186CiAgICAvLyBzcmMvY29udHJhY3QucHk6ODkxLTkwMwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogX19pbml0X18gKGJ1aWx0aW4pCiAgICAvLyAjIGFyZ3VtZW50czogTm9uZQogICAgLy8gIyBwdXJwb3NlOiBUbyBzZXQgdGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlCiAgICAvLyAjICAgICAgICAgIGNvbnRyYWN0LgogICAgLy8gIyBwcmUtY29uZGl0aW9uczogTm9uZQogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6IGluaXRpYWwgc3RhdGUgc2V0CiAgICAvLyAjIGRldGFpbHM6CiAgICAvLyAjIC0gSXQgY2FsbHMgdGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBwYXJlbnQgY2xhc3MKICAgIC8vICMgICBBaXJkcm9wQnJpZGdlLCBlbnN1cmluZyB0aGF0IHRoZSBpbmhlcml0ZWQKICAgIC8vICMgICBwcm9wZXJ0aWVzIGFyZSBpbml0aWFsaXplZCBjb3JyZWN0bHkuCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBkZWYgX19pbml0X18oc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjkwNAogICAgLy8gc3VwZXIoKS5fX2luaXRfXygpCiAgICBjYWxsc3ViIEFpcmRyb3BCcmlkZ2UuX19pbml0X18KICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LkFpcmRyb3BCcmlkZ2UuX19pbml0X18oKSAtPiB2b2lkOgpBaXJkcm9wQnJpZGdlLl9faW5pdF9fOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjUzOQogICAgLy8gZGVmIF9faW5pdF9fKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo3NAogICAgLy8gc2VsZi5kZWxlZ2F0ZSA9IEFjY291bnQoKSAgICAgICAgICAjIHplcm8gYWRkcmVzcwogICAgYnl0ZSAiZGVsZWdhdGUiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTQwLTU0MQogICAgLy8gIyBzdGFrZWFibGUgc3RhdGUKICAgIC8vIHNlbGYuZGVsZWdhdGUgPSBBY2NvdW50KCkgICAgICAgICAgIyB6ZXJvIGFkZHJlc3MKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weTo3NQogICAgLy8gc2VsZi5zdGFrZWFibGUgPSBib29sKDEpICAgICAgICAgIyAxIChEZWZhdWx0IHVubG9ja2VkKQogICAgYnl0ZSAic3Rha2VhYmxlIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU0MgogICAgLy8gc2VsZi5zdGFrZWFibGUgPSBib29sKDEpICAgICAgICAgIyAxIChEZWZhdWx0IHVubG9ja2VkKQogICAgaW50IDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6MTczCiAgICAvLyBzZWxmLmNvbnRyYWN0X3ZlcnNpb24gPSBVSW50NjQoKSAgICMgMAogICAgYnl0ZSAiY29udHJhY3RfdmVyc2lvbiIKICAgIC8vIHNyYy9jb250cmFjdC5weTo1NDMtNTQ0CiAgICAvLyAjIHVwZ3JhZGVhYmxlIHN0YXRlCiAgICAvLyBzZWxmLmNvbnRyYWN0X3ZlcnNpb24gPSBVSW50NjQoKSAgICMgMAogICAgaW50IDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6MTc0CiAgICAvLyBzZWxmLmRlcGxveW1lbnRfdmVyc2lvbiA9IFVJbnQ2NCgpICMgMAogICAgYnl0ZSAiZGVwbG95bWVudF92ZXJzaW9uIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU0NQogICAgLy8gc2VsZi5kZXBsb3ltZW50X3ZlcnNpb24gPSBVSW50NjQoKSAjIDAKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE3NQogICAgLy8gc2VsZi51cGRhdGFibGUgPSBib29sKDEpICAgICAgICAgICAjIDEgKERlZmF1bHQgdW5sb2NrZWQpCiAgICBieXRlICJ1cGRhdGFibGUiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTQ2CiAgICAvLyBzZWxmLnVwZGF0YWJsZSA9IGJvb2woMSkgICAgICAgICAgICMgMSAoRGVmYXVsdCB1bmxvY2tlZCkKICAgIGludCAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpICAgICAgICAgICAgICMgemVybyBhZGRyZXNzCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9jb250cmFjdC5weTo1NDctNTQ4CiAgICAvLyAjIG93bmFibGUgc3RhdGUKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkgICAgICAgICAgICAgIyB6ZXJvIGFkZHJlc3MKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weToyNDctMjQ4CiAgICAvLyAjIGhvdCBzdGF0ZQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkgICAgICAgICAgICAjIHplcm8gYWRkcmVzcwogICAgYnl0ZSAiZnVuZGVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU0OS01NTAKICAgIC8vICMgbG9ja2FibGUgc3RhdGUKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpICAgICAgICAgICAgIyB6ZXJvIGFkZHJlc3MKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weToyNDkKICAgIC8vIHNlbGYucGVyaW9kID0gVUludDY0KCkgICAgICAgICAgICAgIyAwCiAgICBieXRlICJwZXJpb2QiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTUxCiAgICAvLyBzZWxmLnBlcmlvZCA9IFVJbnQ2NCgpICAgICAgICAgICAgICMgMAogICAgaW50IDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6MjUwCiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBVSW50NjQoKSAgICAgICAgICAgICMgMAogICAgYnl0ZSAiZnVuZGluZyIKICAgIC8vIHNyYy9jb250cmFjdC5weTo1NTIKICAgIC8vIHNlbGYuZnVuZGluZyA9IFVJbnQ2NCgpICAgICAgICAgICAgIyAwCiAgICBpbnQgMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weToyNTEKICAgIC8vIHNlbGYudG90YWwgPSBVSW50NjQoKSAgICAgICAgICAgICAgIyAwCiAgICBieXRlICJ0b3RhbCIKICAgIC8vIHNyYy9jb250cmFjdC5weTo1NTMKICAgIC8vIHNlbGYudG90YWwgPSBVSW50NjQoKSAgICAgICAgICAgICAgIyAwCiAgICBpbnQgMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weToyNTIKICAgIC8vIHNlbGYuaW5pdGlhbCA9IFVJbnQ2NCgpICAgICAgICAgICAgIyAwCiAgICBieXRlICJpbml0aWFsIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU1NAogICAgLy8gc2VsZi5pbml0aWFsID0gVUludDY0KCkgICAgICAgICAgICAjIDAKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI1MwogICAgLy8gc2VsZi5kZWFkbGluZSA9IFVJbnQ2NCgpICAgICAgICAgICAjIDAKICAgIGJ5dGUgImRlYWRsaW5lIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU1NQogICAgLy8gc2VsZi5kZWFkbGluZSA9IFVJbnQ2NCgpICAgICAgICAgICAjIDAKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI1NC0yNTUKICAgIC8vICMgY29sZCBzdGF0ZQogICAgLy8gc2VsZi5wYXJlbnRfaWQgPSBVSW50NjQoKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAwCiAgICBieXRlICJwYXJlbnRfaWQiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTU2CiAgICAvLyBzZWxmLnBhcmVudF9pZCA9IFVJbnQ2NCgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIDAKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI1NgogICAgLy8gc2VsZi5tZXNzZW5nZXJfaWQgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJNRVNTRU5HRVJfSUQiKSAgICAgIyBleCkgMAogICAgYnl0ZSAibWVzc2VuZ2VyX2lkIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU1NwogICAgLy8gc2VsZi5tZXNzZW5nZXJfaWQgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJNRVNTRU5HRVJfSUQiKSAgICAgIyBleCkgMAogICAgaW50IFRNUExfTUVTU0VOR0VSX0lECiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI1NwogICAgLy8gc2VsZi5wZXJpb2Rfc2Vjb25kcyA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oIlBFUklPRF9TRUNPTkRTIikgIyBleCkgMjU5MjAwMAogICAgYnl0ZSAicGVyaW9kX3NlY29uZHMiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTU4CiAgICAvLyBzZWxmLnBlcmlvZF9zZWNvbmRzID0gVGVtcGxhdGVWYXJbVUludDY0XSgiUEVSSU9EX1NFQ09ORFMiKSAjIGV4KSAyNTkyMDAwCiAgICBpbnQgVE1QTF9QRVJJT0RfU0VDT05EUwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weToyNTgKICAgIC8vIHNlbGYubG9ja3VwX2RlbGF5ID0gVGVtcGxhdGVWYXJbVUludDY0XSgiTE9DS1VQX0RFTEFZIikgICAgICMgZXgpIDEyCiAgICBieXRlICJsb2NrdXBfZGVsYXkiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTU5CiAgICAvLyBzZWxmLmxvY2t1cF9kZWxheSA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oIkxPQ0tVUF9ERUxBWSIpICAgICAjIGV4KSAxMgogICAgaW50IFRNUExfTE9DS1VQX0RFTEFZCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI1OQogICAgLy8gc2VsZi52ZXN0aW5nX2RlbGF5ID0gVGVtcGxhdGVWYXJbVUludDY0XSgiVkVTVElOR19ERUxBWSIpICAgIyBleCkgMTIKICAgIGJ5dGUgInZlc3RpbmdfZGVsYXkiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTYwCiAgICAvLyBzZWxmLnZlc3RpbmdfZGVsYXkgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJWRVNUSU5HX0RFTEFZIikgICAjIGV4KSAxMgogICAgaW50IFRNUExfVkVTVElOR19ERUxBWQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weToyNjAKICAgIC8vIHNlbGYucGVyaW9kX2xpbWl0ID0gVGVtcGxhdGVWYXJbVUludDY0XSgiUEVSSU9EX0xJTUlUIikgICAgICMgZXgpIDUKICAgIGJ5dGUgInBlcmlvZF9saW1pdCIKICAgIC8vIHNyYy9jb250cmFjdC5weTo1NjEKICAgIC8vIHNlbGYucGVyaW9kX2xpbWl0ID0gVGVtcGxhdGVWYXJbVUludDY0XSgiUEVSSU9EX0xJTUlUIikgICAgICMgZXgpIDUKICAgIGludCBUTVBMX1BFUklPRF9MSU1JVAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1Ygo=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5FYXJseVN0YWtlUmV3YXJkLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzcmMvY29udHJhY3QucHk6ODg2LTg5MAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgRWFybHlTdGFrZVJld2FyZAogICAgLy8gIyAgIGZhY2lsaXRhdGVzIGVhcmx5IHN0YWtpbmcgcmV3YXJkcwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGNsYXNzIEVhcmx5U3Rha2VSZXdhcmQoQWlyZHJvcEJyaWRnZSk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 15
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "contract_version": {
          "type": "uint64",
          "key": "contract_version"
        },
        "deadline": {
          "type": "uint64",
          "key": "deadline"
        },
        "delegate": {
          "type": "bytes",
          "key": "delegate"
        },
        "deployment_version": {
          "type": "uint64",
          "key": "deployment_version"
        },
        "funder": {
          "type": "bytes",
          "key": "funder"
        },
        "funding": {
          "type": "uint64",
          "key": "funding"
        },
        "initial": {
          "type": "uint64",
          "key": "initial"
        },
        "lockup_delay": {
          "type": "uint64",
          "key": "lockup_delay"
        },
        "messenger_id": {
          "type": "uint64",
          "key": "messenger_id"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "parent_id": {
          "type": "uint64",
          "key": "parent_id"
        },
        "period": {
          "type": "uint64",
          "key": "period"
        },
        "period_limit": {
          "type": "uint64",
          "key": "period_limit"
        },
        "period_seconds": {
          "type": "uint64",
          "key": "period_seconds"
        },
        "stakeable": {
          "type": "uint64",
          "key": "stakeable"
        },
        "total": {
          "type": "uint64",
          "key": "total"
        },
        "updatable": {
          "type": "uint64",
          "key": "updatable"
        },
        "vesting_delay": {
          "type": "uint64",
          "key": "vesting_delay"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "EarlyStakeReward",
    "methods": [
      {
        "name": "setup",
        "args": [
          {
            "type": "address",
            "name": "owner"
          },
          {
            "type": "address",
            "name": "funder"
          },
          {
            "type": "address",
            "name": "delegate"
          },
          {
            "type": "uint64",
            "name": "period"
          },
          {
            "type": "uint64",
            "name": "initial"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "fill",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "approve_update",
        "args": [
          {
            "type": "bool",
            "name": "approval"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_delegate",
        "args": [
          {
            "type": "address",
            "name": "delegate"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "participate",
        "args": [
          {
            "type": "byte[32]",
            "name": "vote_k"
          },
          {
            "type": "byte[32]",
            "name": "sel_k"
          },
          {
            "type": "uint64",
            "name": "vote_fst"
          },
          {
            "type": "uint64",
            "name": "vote_lst"
          },
          {
            "type": "uint64",
            "name": "vote_kd"
          },
          {
            "type": "byte[64]",
            "name": "sp_key"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_version",
        "args": [
          {
            "type": "uint64",
            "name": "contract_version"
          },
          {
            "type": "uint64",
            "name": "deployment_version"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "close",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "update_application": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the EarlyStakeReward smart contract.
 */
export type EarlyStakeReward = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'setup(address,address,address,uint64,uint64)void' | 'setup', {
      argsObj: {
        owner: string
        funder: string
        delegate: string
        period: bigint | number
        initial: bigint | number
      }
      argsTuple: [owner: string, funder: string, delegate: string, period: bigint | number, initial: bigint | number]
      returns: void
    }>
    & Record<'fill()void' | 'fill', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'withdraw(uint64)uint64' | 'withdraw', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: bigint
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: {
        approval: boolean
      }
      argsTuple: [approval: boolean]
      returns: void
    }>
    & Record<'set_delegate(address)void' | 'set_delegate', {
      argsObj: {
        delegate: string
      }
      argsTuple: [delegate: string]
      returns: void
    }>
    & Record<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' | 'participate', {
      argsObj: {
        voteK: Uint8Array
        selK: Uint8Array
        voteFst: bigint | number
        voteLst: bigint | number
        voteKd: bigint | number
        spKey: Uint8Array
      }
      argsTuple: [voteK: Uint8Array, selK: Uint8Array, voteFst: bigint | number, voteLst: bigint | number, voteKd: bigint | number, spKey: Uint8Array]
      returns: void
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: {
        contractVersion: bigint | number
        deploymentVersion: bigint | number
      }
      argsTuple: [contractVersion: bigint | number, deploymentVersion: bigint | number]
      returns: void
    }>
    & Record<'close()void' | 'close', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      contractVersion?: IntegerState
      deadline?: IntegerState
      delegate?: BinaryState
      deploymentVersion?: IntegerState
      funder?: BinaryState
      funding?: IntegerState
      initial?: IntegerState
      lockupDelay?: IntegerState
      messengerId?: IntegerState
      owner?: BinaryState
      parentId?: IntegerState
      period?: IntegerState
      periodLimit?: IntegerState
      periodSeconds?: IntegerState
      stakeable?: IntegerState
      total?: IntegerState
      updatable?: IntegerState
      vestingDelay?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type EarlyStakeRewardSig = keyof EarlyStakeReward['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends EarlyStakeRewardSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the EarlyStakeReward smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends EarlyStakeRewardSig> = EarlyStakeReward['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the EarlyStakeReward smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EarlyStakeRewardSig> = EarlyStakeReward['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type EarlyStakeRewardCreateCalls = (typeof EarlyStakeRewardCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type EarlyStakeRewardCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type EarlyStakeRewardUpdateCalls = (typeof EarlyStakeRewardCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type EarlyStakeRewardUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type EarlyStakeRewardDeleteCalls = (typeof EarlyStakeRewardCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type EarlyStakeRewardDeleteCallParams =
  | TypedCallParams<'close()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type EarlyStakeRewardDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: EarlyStakeRewardCreateCalls) => EarlyStakeRewardCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: EarlyStakeRewardUpdateCalls) => EarlyStakeRewardUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: EarlyStakeRewardDeleteCalls) => EarlyStakeRewardDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class EarlyStakeRewardCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the EarlyStakeReward smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the EarlyStakeReward smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the EarlyStakeReward smart contract using the close()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      close(args: MethodArgs<'close()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'close()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setup(address,address,address,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setup(args: MethodArgs<'setup(address,address,address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setup(address,address,address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.funder, args.delegate, args.period, args.initial],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fill()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fill(args: MethodArgs<'fill()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fill()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_update(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_delegate(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_delegate(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.delegate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_version(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
}

/**
 * A client to make calls to the EarlyStakeReward smart contract
 */
export class EarlyStakeRewardClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `EarlyStakeRewardClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof EarlyStakeReward['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the EarlyStakeReward smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: EarlyStakeRewardDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(EarlyStakeRewardCallFactory.create)
    const updateArgs = params.updateCall?.(EarlyStakeRewardCallFactory.update)
    const deleteArgs = params.deleteCall?.(EarlyStakeRewardCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the EarlyStakeReward smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the EarlyStakeReward smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the EarlyStakeReward smart contract using the close()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async close(args: MethodArgs<'close()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'close()void'>>(await $this.appClient.delete(EarlyStakeRewardCallFactory.delete.close(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the EarlyStakeReward smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the setup(address,address,address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setup(args: MethodArgs<'setup(address,address,address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EarlyStakeRewardCallFactory.setup(args, params))
  }

  /**
   * Calls the fill()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fill(args: MethodArgs<'fill()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EarlyStakeRewardCallFactory.fill(args, params))
  }

  /**
   * Calls the withdraw(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EarlyStakeRewardCallFactory.withdraw(args, params))
  }

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EarlyStakeRewardCallFactory.approveUpdate(args, params))
  }

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EarlyStakeRewardCallFactory.setDelegate(args, params))
  }

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EarlyStakeRewardCallFactory.participate(args, params))
  }

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EarlyStakeRewardCallFactory.setVersion(args, params))
  }

  /**
   * Calls the transfer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EarlyStakeRewardCallFactory.transfer(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<EarlyStakeReward['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get contractVersion() {
        return EarlyStakeRewardClient.getIntegerState(state, 'contract_version')
      },
      get deadline() {
        return EarlyStakeRewardClient.getIntegerState(state, 'deadline')
      },
      get delegate() {
        return EarlyStakeRewardClient.getBinaryState(state, 'delegate')
      },
      get deploymentVersion() {
        return EarlyStakeRewardClient.getIntegerState(state, 'deployment_version')
      },
      get funder() {
        return EarlyStakeRewardClient.getBinaryState(state, 'funder')
      },
      get funding() {
        return EarlyStakeRewardClient.getIntegerState(state, 'funding')
      },
      get initial() {
        return EarlyStakeRewardClient.getIntegerState(state, 'initial')
      },
      get lockupDelay() {
        return EarlyStakeRewardClient.getIntegerState(state, 'lockup_delay')
      },
      get messengerId() {
        return EarlyStakeRewardClient.getIntegerState(state, 'messenger_id')
      },
      get owner() {
        return EarlyStakeRewardClient.getBinaryState(state, 'owner')
      },
      get parentId() {
        return EarlyStakeRewardClient.getIntegerState(state, 'parent_id')
      },
      get period() {
        return EarlyStakeRewardClient.getIntegerState(state, 'period')
      },
      get periodLimit() {
        return EarlyStakeRewardClient.getIntegerState(state, 'period_limit')
      },
      get periodSeconds() {
        return EarlyStakeRewardClient.getIntegerState(state, 'period_seconds')
      },
      get stakeable() {
        return EarlyStakeRewardClient.getIntegerState(state, 'stakeable')
      },
      get total() {
        return EarlyStakeRewardClient.getIntegerState(state, 'total')
      },
      get updatable() {
        return EarlyStakeRewardClient.getIntegerState(state, 'updatable')
      },
      get vestingDelay() {
        return EarlyStakeRewardClient.getIntegerState(state, 'vesting_delay')
      },
    }
  }

  public compose(): EarlyStakeRewardComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setup(args: MethodArgs<'setup(address,address,address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setup(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fill(args: MethodArgs<'fill()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fill(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setDelegate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.participate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          close(args: MethodArgs<'close()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.close(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as EarlyStakeRewardComposer
  }
}
export type EarlyStakeRewardComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setup(address,address,address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setup(args: MethodArgs<'setup(address,address,address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EarlyStakeRewardComposer<[...TReturns, MethodReturn<'setup(address,address,address,uint64,uint64)void'>]>

  /**
   * Calls the fill()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fill(args: MethodArgs<'fill()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EarlyStakeRewardComposer<[...TReturns, MethodReturn<'fill()void'>]>

  /**
   * Calls the withdraw(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EarlyStakeRewardComposer<[...TReturns, MethodReturn<'withdraw(uint64)uint64'>]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EarlyStakeRewardComposer<[...TReturns, MethodReturn<'approve_update(bool)void'>]>

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EarlyStakeRewardComposer<[...TReturns, MethodReturn<'set_delegate(address)void'>]>

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EarlyStakeRewardComposer<[...TReturns, MethodReturn<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EarlyStakeRewardComposer<[...TReturns, MethodReturn<'set_version(uint64,uint64)void'>]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EarlyStakeRewardComposer<[...TReturns, MethodReturn<'transfer(address)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the EarlyStakeReward smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): EarlyStakeRewardComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the EarlyStakeReward smart contract using the close()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    close(args: MethodArgs<'close()void'>, params?: AppClientComposeCallCoreParams): EarlyStakeRewardComposer<[...TReturns, MethodReturn<'close()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the EarlyStakeReward smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): EarlyStakeRewardComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): EarlyStakeRewardComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<EarlyStakeRewardComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<EarlyStakeRewardComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type EarlyStakeRewardComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type EarlyStakeRewardComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
