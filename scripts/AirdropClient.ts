/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "set_delegate(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_version(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve_update(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "preconfigure(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_vesting_delay(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_total(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setup(address,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "configure(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "close()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "fill()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_funding(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5BaXJkcm9wLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzcmMvY29udHJhY3QucHk6NzkwLTc5MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBEZXBsb3lhYmxlLCBTdGFrZWFibGUsIFVwZ3JhZGVhYmxlLCBPd25hYmxlLCBMb2NrYWJsZSwgRnVuZGFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgaW50IDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 17
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "contract_version": {
          "type": "uint64",
          "key": "contract_version"
        },
        "deadline": {
          "type": "uint64",
          "key": "deadline"
        },
        "delegate": {
          "type": "bytes",
          "key": "delegate"
        },
        "deployment_version": {
          "type": "uint64",
          "key": "deployment_version"
        },
        "distribution_count": {
          "type": "uint64",
          "key": "distribution_count"
        },
        "distribution_seconds": {
          "type": "uint64",
          "key": "distribution_seconds"
        },
        "funder": {
          "type": "bytes",
          "key": "funder"
        },
        "funding": {
          "type": "uint64",
          "key": "funding"
        },
        "initial": {
          "type": "uint64",
          "key": "initial"
        },
        "lockup_delay": {
          "type": "uint64",
          "key": "lockup_delay"
        },
        "messenger_id": {
          "type": "uint64",
          "key": "messenger_id"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "parent_id": {
          "type": "uint64",
          "key": "parent_id"
        },
        "period": {
          "type": "uint64",
          "key": "period"
        },
        "period_limit": {
          "type": "uint64",
          "key": "period_limit"
        },
        "period_seconds": {
          "type": "uint64",
          "key": "period_seconds"
        },
        "stakeable": {
          "type": "uint64",
          "key": "stakeable"
        },
        "total": {
          "type": "uint64",
          "key": "total"
        },
        "updatable": {
          "type": "uint64",
          "key": "updatable"
        },
        "vesting_delay": {
          "type": "uint64",
          "key": "vesting_delay"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Airdrop",
    "methods": [
      {
        "name": "set_delegate",
        "args": [
          {
            "type": "address",
            "name": "delegate"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "participate",
        "args": [
          {
            "type": "byte[32]",
            "name": "vote_k"
          },
          {
            "type": "byte[32]",
            "name": "sel_k"
          },
          {
            "type": "uint64",
            "name": "vote_fst"
          },
          {
            "type": "uint64",
            "name": "vote_lst"
          },
          {
            "type": "uint64",
            "name": "vote_kd"
          },
          {
            "type": "byte[64]",
            "name": "sp_key"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_version",
        "args": [
          {
            "type": "uint64",
            "name": "contract_version"
          },
          {
            "type": "uint64",
            "name": "deployment_version"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "approve_update",
        "args": [
          {
            "type": "bool",
            "name": "approval"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "preconfigure",
        "args": [
          {
            "type": "uint64",
            "name": "period"
          },
          {
            "type": "uint64",
            "name": "deadline"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Preconfigure lockup period and deadline."
      },
      {
        "name": "set_vesting_delay",
        "args": [
          {
            "type": "uint64",
            "name": "vesting_delay"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set vesting delay."
      },
      {
        "name": "set_total",
        "args": [
          {
            "type": "uint64",
            "name": "funding"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set total funding."
      },
      {
        "name": "setup",
        "args": [
          {
            "type": "address",
            "name": "owner"
          },
          {
            "type": "address",
            "name": "funder"
          },
          {
            "type": "uint64",
            "name": "initial"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "configure",
        "args": [
          {
            "type": "uint64",
            "name": "period"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Withdraw funds from contract."
      },
      {
        "name": "close",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "fill",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_funding",
        "args": [
          {
            "type": "uint64",
            "name": "funding"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "update_application": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Airdrop smart contract.
 */
export type Airdrop = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'set_delegate(address)void' | 'set_delegate', {
      argsObj: {
        delegate: string
      }
      argsTuple: [delegate: string]
      returns: void
    }>
    & Record<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' | 'participate', {
      argsObj: {
        voteK: Uint8Array
        selK: Uint8Array
        voteFst: bigint | number
        voteLst: bigint | number
        voteKd: bigint | number
        spKey: Uint8Array
      }
      argsTuple: [voteK: Uint8Array, selK: Uint8Array, voteFst: bigint | number, voteLst: bigint | number, voteKd: bigint | number, spKey: Uint8Array]
      returns: void
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: {
        contractVersion: bigint | number
        deploymentVersion: bigint | number
      }
      argsTuple: [contractVersion: bigint | number, deploymentVersion: bigint | number]
      returns: void
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: {
        approval: boolean
      }
      argsTuple: [approval: boolean]
      returns: void
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
    & Record<'preconfigure(uint64,uint64)void' | 'preconfigure', {
      argsObj: {
        period: bigint | number
        deadline: bigint | number
      }
      argsTuple: [period: bigint | number, deadline: bigint | number]
      returns: void
    }>
    & Record<'set_vesting_delay(uint64)void' | 'set_vesting_delay', {
      argsObj: {
        vestingDelay: bigint | number
      }
      argsTuple: [vestingDelay: bigint | number]
      returns: void
    }>
    & Record<'set_total(uint64)void' | 'set_total', {
      argsObj: {
        funding: bigint | number
      }
      argsTuple: [funding: bigint | number]
      returns: void
    }>
    & Record<'setup(address,address,uint64)void' | 'setup', {
      argsObj: {
        owner: string
        funder: string
        initial: bigint | number
      }
      argsTuple: [owner: string, funder: string, initial: bigint | number]
      returns: void
    }>
    & Record<'configure(uint64)void' | 'configure', {
      argsObj: {
        period: bigint | number
      }
      argsTuple: [period: bigint | number]
      returns: void
    }>
    & Record<'withdraw(uint64)uint64' | 'withdraw', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: bigint
    }>
    & Record<'close()void' | 'close', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'fill()void' | 'fill', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'set_funding(uint64)void' | 'set_funding', {
      argsObj: {
        funding: bigint | number
      }
      argsTuple: [funding: bigint | number]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      contractVersion?: IntegerState
      deadline?: IntegerState
      delegate?: BinaryState
      deploymentVersion?: IntegerState
      distributionCount?: IntegerState
      distributionSeconds?: IntegerState
      funder?: BinaryState
      funding?: IntegerState
      initial?: IntegerState
      lockupDelay?: IntegerState
      messengerId?: IntegerState
      owner?: BinaryState
      parentId?: IntegerState
      period?: IntegerState
      periodLimit?: IntegerState
      periodSeconds?: IntegerState
      stakeable?: IntegerState
      total?: IntegerState
      updatable?: IntegerState
      vestingDelay?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AirdropSig = keyof Airdrop['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AirdropSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Airdrop smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AirdropSig> = Airdrop['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Airdrop smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AirdropSig> = Airdrop['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AirdropCreateCalls = (typeof AirdropCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AirdropCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type AirdropUpdateCalls = (typeof AirdropCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type AirdropUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type AirdropDeleteCalls = (typeof AirdropCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type AirdropDeleteCallParams =
  | TypedCallParams<'close()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type AirdropDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AirdropCreateCalls) => AirdropCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: AirdropUpdateCalls) => AirdropUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: AirdropDeleteCalls) => AirdropDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AirdropCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Airdrop smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the Airdrop smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Airdrop smart contract using the close()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      close(args: MethodArgs<'close()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'close()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_delegate(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_delegate(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.delegate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_version(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_update(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the preconfigure(uint64,uint64)void ABI method
   *
   * Preconfigure lockup period and deadline.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static preconfigure(args: MethodArgs<'preconfigure(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'preconfigure(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.period, args.deadline],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_vesting_delay(uint64)void ABI method
   *
   * Set vesting delay.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVestingDelay(args: MethodArgs<'set_vesting_delay(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_vesting_delay(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.vestingDelay],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_total(uint64)void ABI method
   *
   * Set total funding.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setTotal(args: MethodArgs<'set_total(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_total(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.funding],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setup(address,address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setup(args: MethodArgs<'setup(address,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setup(address,address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.funder, args.initial],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the configure(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static configure(args: MethodArgs<'configure(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'configure(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.period],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)uint64 ABI method
   *
   * Withdraw funds from contract.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fill()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fill(args: MethodArgs<'fill()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fill()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_funding(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFunding(args: MethodArgs<'set_funding(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_funding(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.funding],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Airdrop smart contract
 */
export class AirdropClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AirdropClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Airdrop['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Airdrop smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AirdropDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AirdropCallFactory.create)
    const updateArgs = params.updateCall?.(AirdropCallFactory.update)
    const deleteArgs = params.deleteCall?.(AirdropCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Airdrop smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the Airdrop smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the Airdrop smart contract using the close()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async close(args: MethodArgs<'close()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'close()void'>>(await $this.appClient.delete(AirdropCallFactory.delete.close(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Airdrop smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setDelegate(args, params))
  }

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.participate(args, params))
  }

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setVersion(args, params))
  }

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.approveUpdate(args, params))
  }

  /**
   * Calls the transfer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.transfer(args, params))
  }

  /**
   * Calls the preconfigure(uint64,uint64)void ABI method.
   *
   * Preconfigure lockup period and deadline.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public preconfigure(args: MethodArgs<'preconfigure(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.preconfigure(args, params))
  }

  /**
   * Calls the set_vesting_delay(uint64)void ABI method.
   *
   * Set vesting delay.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVestingDelay(args: MethodArgs<'set_vesting_delay(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setVestingDelay(args, params))
  }

  /**
   * Calls the set_total(uint64)void ABI method.
   *
   * Set total funding.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setTotal(args: MethodArgs<'set_total(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setTotal(args, params))
  }

  /**
   * Calls the setup(address,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setup(args: MethodArgs<'setup(address,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setup(args, params))
  }

  /**
   * Calls the configure(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public configure(args: MethodArgs<'configure(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.configure(args, params))
  }

  /**
   * Calls the withdraw(uint64)uint64 ABI method.
   *
   * Withdraw funds from contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.withdraw(args, params))
  }

  /**
   * Calls the fill()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fill(args: MethodArgs<'fill()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.fill(args, params))
  }

  /**
   * Calls the set_funding(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setFunding(args: MethodArgs<'set_funding(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setFunding(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Airdrop['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get contractVersion() {
        return AirdropClient.getIntegerState(state, 'contract_version')
      },
      get deadline() {
        return AirdropClient.getIntegerState(state, 'deadline')
      },
      get delegate() {
        return AirdropClient.getBinaryState(state, 'delegate')
      },
      get deploymentVersion() {
        return AirdropClient.getIntegerState(state, 'deployment_version')
      },
      get distributionCount() {
        return AirdropClient.getIntegerState(state, 'distribution_count')
      },
      get distributionSeconds() {
        return AirdropClient.getIntegerState(state, 'distribution_seconds')
      },
      get funder() {
        return AirdropClient.getBinaryState(state, 'funder')
      },
      get funding() {
        return AirdropClient.getIntegerState(state, 'funding')
      },
      get initial() {
        return AirdropClient.getIntegerState(state, 'initial')
      },
      get lockupDelay() {
        return AirdropClient.getIntegerState(state, 'lockup_delay')
      },
      get messengerId() {
        return AirdropClient.getIntegerState(state, 'messenger_id')
      },
      get owner() {
        return AirdropClient.getBinaryState(state, 'owner')
      },
      get parentId() {
        return AirdropClient.getIntegerState(state, 'parent_id')
      },
      get period() {
        return AirdropClient.getIntegerState(state, 'period')
      },
      get periodLimit() {
        return AirdropClient.getIntegerState(state, 'period_limit')
      },
      get periodSeconds() {
        return AirdropClient.getIntegerState(state, 'period_seconds')
      },
      get stakeable() {
        return AirdropClient.getIntegerState(state, 'stakeable')
      },
      get total() {
        return AirdropClient.getIntegerState(state, 'total')
      },
      get updatable() {
        return AirdropClient.getIntegerState(state, 'updatable')
      },
      get vestingDelay() {
        return AirdropClient.getIntegerState(state, 'vesting_delay')
      },
    }
  }

  public compose(): AirdropComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setDelegate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.participate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      preconfigure(args: MethodArgs<'preconfigure(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.preconfigure(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVestingDelay(args: MethodArgs<'set_vesting_delay(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVestingDelay(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setTotal(args: MethodArgs<'set_total(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setTotal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setup(args: MethodArgs<'setup(address,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setup(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      configure(args: MethodArgs<'configure(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.configure(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fill(args: MethodArgs<'fill()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fill(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setFunding(args: MethodArgs<'set_funding(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFunding(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          close(args: MethodArgs<'close()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.close(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AirdropComposer
  }
}
export type AirdropComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_delegate(address)void'>]>

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_version(uint64,uint64)void'>]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'approve_update(bool)void'>]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'transfer(address)void'>]>

  /**
   * Calls the preconfigure(uint64,uint64)void ABI method.
   *
   * Preconfigure lockup period and deadline.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  preconfigure(args: MethodArgs<'preconfigure(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'preconfigure(uint64,uint64)void'>]>

  /**
   * Calls the set_vesting_delay(uint64)void ABI method.
   *
   * Set vesting delay.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVestingDelay(args: MethodArgs<'set_vesting_delay(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_vesting_delay(uint64)void'>]>

  /**
   * Calls the set_total(uint64)void ABI method.
   *
   * Set total funding.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setTotal(args: MethodArgs<'set_total(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_total(uint64)void'>]>

  /**
   * Calls the setup(address,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setup(args: MethodArgs<'setup(address,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'setup(address,address,uint64)void'>]>

  /**
   * Calls the configure(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configure(args: MethodArgs<'configure(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'configure(uint64)void'>]>

  /**
   * Calls the withdraw(uint64)uint64 ABI method.
   *
   * Withdraw funds from contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'withdraw(uint64)uint64'>]>

  /**
   * Calls the fill()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fill(args: MethodArgs<'fill()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'fill()void'>]>

  /**
   * Calls the set_funding(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFunding(args: MethodArgs<'set_funding(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_funding(uint64)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Airdrop smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): AirdropComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Airdrop smart contract using the close()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    close(args: MethodArgs<'close()void'>, params?: AppClientComposeCallCoreParams): AirdropComposer<[...TReturns, MethodReturn<'close()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Airdrop smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AirdropComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<AirdropComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<AirdropComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type AirdropComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AirdropComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
