/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "setup(address,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "configure(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fill(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "close()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "approve_update(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_version(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5TbWFydENvbnRyYWN0U3Rha2luZy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE1OC0xNjIKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIFNtYXJ0Q29udHJhY3RTdGFraW5nCiAgICAvLyAjICAgZmFjaWxpdGF0ZXMgYWlyZHJvcCBzdGFraW5nCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gY2xhc3MgU21hcnRDb250cmFjdFN0YWtpbmcoT3duZWRVcGdyYWRlYWJsZSk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 11
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "contract_version": {
          "type": "uint64",
          "key": "contract_version"
        },
        "deployment_version": {
          "type": "uint64",
          "key": "deployment_version"
        },
        "funder": {
          "type": "bytes",
          "key": "funder"
        },
        "funding": {
          "type": "uint64",
          "key": "funding"
        },
        "lockup_delay": {
          "type": "uint64",
          "key": "lockup_delay"
        },
        "messenger_id": {
          "type": "uint64",
          "key": "messenger_id"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "period": {
          "type": "uint64",
          "key": "period"
        },
        "period_limit": {
          "type": "uint64",
          "key": "period_limit"
        },
        "period_seconds": {
          "type": "uint64",
          "key": "period_seconds"
        },
        "total": {
          "type": "uint64",
          "key": "total"
        },
        "updatable": {
          "type": "uint64",
          "key": "updatable"
        },
        "vesting_delay": {
          "type": "uint64",
          "key": "vesting_delay"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "SmartContractStaking",
    "methods": [
      {
        "name": "setup",
        "args": [
          {
            "type": "address",
            "name": "owner"
          },
          {
            "type": "address",
            "name": "funder"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "configure",
        "args": [
          {
            "type": "uint64",
            "name": "period"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "fill",
        "args": [
          {
            "type": "uint64",
            "name": "funding"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "participate",
        "args": [
          {
            "type": "byte[32]",
            "name": "vote_k"
          },
          {
            "type": "byte[32]",
            "name": "sel_k"
          },
          {
            "type": "uint64",
            "name": "vote_fst"
          },
          {
            "type": "uint64",
            "name": "vote_lst"
          },
          {
            "type": "uint64",
            "name": "vote_kd"
          },
          {
            "type": "byte[64]",
            "name": "sp_key"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "close",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "approve_update",
        "args": [
          {
            "type": "bool",
            "name": "approval"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_version",
        "args": [
          {
            "type": "uint64",
            "name": "contract_version"
          },
          {
            "type": "uint64",
            "name": "deployment_version"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "update_application": "CALL",
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the SmartContractStaking smart contract.
 */
export type SmartContractStaking = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'setup(address,address)void' | 'setup', {
      argsObj: {
        owner: string
        funder: string
      }
      argsTuple: [owner: string, funder: string]
      returns: void
    }>
    & Record<'configure(uint64)void' | 'configure', {
      argsObj: {
        period: bigint | number
      }
      argsTuple: [period: bigint | number]
      returns: void
    }>
    & Record<'fill(uint64)void' | 'fill', {
      argsObj: {
        funding: bigint | number
      }
      argsTuple: [funding: bigint | number]
      returns: void
    }>
    & Record<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' | 'participate', {
      argsObj: {
        voteK: Uint8Array
        selK: Uint8Array
        voteFst: bigint | number
        voteLst: bigint | number
        voteKd: bigint | number
        spKey: Uint8Array
      }
      argsTuple: [voteK: Uint8Array, selK: Uint8Array, voteFst: bigint | number, voteLst: bigint | number, voteKd: bigint | number, spKey: Uint8Array]
      returns: void
    }>
    & Record<'withdraw(uint64)uint64' | 'withdraw', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: bigint
    }>
    & Record<'close()void' | 'close', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: {
        approval: boolean
      }
      argsTuple: [approval: boolean]
      returns: void
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: {
        contractVersion: bigint | number
        deploymentVersion: bigint | number
      }
      argsTuple: [contractVersion: bigint | number, deploymentVersion: bigint | number]
      returns: void
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      contractVersion?: IntegerState
      deploymentVersion?: IntegerState
      funder?: BinaryState
      funding?: IntegerState
      lockupDelay?: IntegerState
      messengerId?: IntegerState
      owner?: BinaryState
      period?: IntegerState
      periodLimit?: IntegerState
      periodSeconds?: IntegerState
      total?: IntegerState
      updatable?: IntegerState
      vestingDelay?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type SmartContractStakingSig = keyof SmartContractStaking['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends SmartContractStakingSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the SmartContractStaking smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends SmartContractStakingSig> = SmartContractStaking['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the SmartContractStaking smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SmartContractStakingSig> = SmartContractStaking['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type SmartContractStakingCreateCalls = (typeof SmartContractStakingCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type SmartContractStakingCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type SmartContractStakingUpdateCalls = (typeof SmartContractStakingCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type SmartContractStakingUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type SmartContractStakingDeleteCalls = (typeof SmartContractStakingCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type SmartContractStakingDeleteCallParams =
  | TypedCallParams<'close()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type SmartContractStakingDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: SmartContractStakingCreateCalls) => SmartContractStakingCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: SmartContractStakingUpdateCalls) => SmartContractStakingUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: SmartContractStakingDeleteCalls) => SmartContractStakingDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class SmartContractStakingCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the SmartContractStaking smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the SmartContractStaking smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the SmartContractStaking smart contract using the close()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      close(args: MethodArgs<'close()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'close()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setup(address,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setup(args: MethodArgs<'setup(address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setup(address,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.funder],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the configure(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static configure(args: MethodArgs<'configure(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'configure(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.period],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fill(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fill(args: MethodArgs<'fill(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fill(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.funding],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_update(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_version(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
}

/**
 * A client to make calls to the SmartContractStaking smart contract
 */
export class SmartContractStakingClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `SmartContractStakingClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof SmartContractStaking['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the SmartContractStaking smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: SmartContractStakingDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(SmartContractStakingCallFactory.create)
    const updateArgs = params.updateCall?.(SmartContractStakingCallFactory.update)
    const deleteArgs = params.deleteCall?.(SmartContractStakingCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the SmartContractStaking smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the SmartContractStaking smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the SmartContractStaking smart contract using the close()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async close(args: MethodArgs<'close()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'close()void'>>(await $this.appClient.delete(SmartContractStakingCallFactory.delete.close(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the SmartContractStaking smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the setup(address,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setup(args: MethodArgs<'setup(address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmartContractStakingCallFactory.setup(args, params))
  }

  /**
   * Calls the configure(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public configure(args: MethodArgs<'configure(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmartContractStakingCallFactory.configure(args, params))
  }

  /**
   * Calls the fill(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fill(args: MethodArgs<'fill(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmartContractStakingCallFactory.fill(args, params))
  }

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmartContractStakingCallFactory.participate(args, params))
  }

  /**
   * Calls the withdraw(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmartContractStakingCallFactory.withdraw(args, params))
  }

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmartContractStakingCallFactory.approveUpdate(args, params))
  }

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmartContractStakingCallFactory.setVersion(args, params))
  }

  /**
   * Calls the transfer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SmartContractStakingCallFactory.transfer(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<SmartContractStaking['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get contractVersion() {
        return SmartContractStakingClient.getIntegerState(state, 'contract_version')
      },
      get deploymentVersion() {
        return SmartContractStakingClient.getIntegerState(state, 'deployment_version')
      },
      get funder() {
        return SmartContractStakingClient.getBinaryState(state, 'funder')
      },
      get funding() {
        return SmartContractStakingClient.getIntegerState(state, 'funding')
      },
      get lockupDelay() {
        return SmartContractStakingClient.getIntegerState(state, 'lockup_delay')
      },
      get messengerId() {
        return SmartContractStakingClient.getIntegerState(state, 'messenger_id')
      },
      get owner() {
        return SmartContractStakingClient.getBinaryState(state, 'owner')
      },
      get period() {
        return SmartContractStakingClient.getIntegerState(state, 'period')
      },
      get periodLimit() {
        return SmartContractStakingClient.getIntegerState(state, 'period_limit')
      },
      get periodSeconds() {
        return SmartContractStakingClient.getIntegerState(state, 'period_seconds')
      },
      get total() {
        return SmartContractStakingClient.getIntegerState(state, 'total')
      },
      get updatable() {
        return SmartContractStakingClient.getIntegerState(state, 'updatable')
      },
      get vestingDelay() {
        return SmartContractStakingClient.getIntegerState(state, 'vesting_delay')
      },
    }
  }

  public compose(): SmartContractStakingComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setup(args: MethodArgs<'setup(address,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setup(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      configure(args: MethodArgs<'configure(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.configure(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fill(args: MethodArgs<'fill(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fill(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.participate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          close(args: MethodArgs<'close()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.close(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as SmartContractStakingComposer
  }
}
export type SmartContractStakingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setup(address,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setup(args: MethodArgs<'setup(address,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SmartContractStakingComposer<[...TReturns, MethodReturn<'setup(address,address)void'>]>

  /**
   * Calls the configure(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configure(args: MethodArgs<'configure(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SmartContractStakingComposer<[...TReturns, MethodReturn<'configure(uint64)void'>]>

  /**
   * Calls the fill(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fill(args: MethodArgs<'fill(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SmartContractStakingComposer<[...TReturns, MethodReturn<'fill(uint64)void'>]>

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SmartContractStakingComposer<[...TReturns, MethodReturn<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>]>

  /**
   * Calls the withdraw(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SmartContractStakingComposer<[...TReturns, MethodReturn<'withdraw(uint64)uint64'>]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SmartContractStakingComposer<[...TReturns, MethodReturn<'approve_update(bool)void'>]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SmartContractStakingComposer<[...TReturns, MethodReturn<'set_version(uint64,uint64)void'>]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SmartContractStakingComposer<[...TReturns, MethodReturn<'transfer(address)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the SmartContractStaking smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): SmartContractStakingComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the SmartContractStaking smart contract using the close()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    close(args: MethodArgs<'close()void'>, params?: AppClientComposeCallCoreParams): SmartContractStakingComposer<[...TReturns, MethodReturn<'close()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the SmartContractStaking smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): SmartContractStakingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): SmartContractStakingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<SmartContractStakingComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<SmartContractStakingComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type SmartContractStakingComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type SmartContractStakingComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
