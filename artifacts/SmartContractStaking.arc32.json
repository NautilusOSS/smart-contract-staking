{
    "hints": {
        "setup(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "configure(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fill(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "participate(byte[],byte[],uint64,uint64,uint64,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "close()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5TbWFydENvbnRyYWN0U3Rha2luZy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gY29udHJhY3QucHk6MTgKICAgIC8vIGNsYXNzIFNtYXJ0Q29udHJhY3RTdGFraW5nKEFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "funder": {
                    "type": "bytes",
                    "key": "funder"
                },
                "funding": {
                    "type": "uint64",
                    "key": "funding"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                },
                "period": {
                    "type": "uint64",
                    "key": "period"
                },
                "total": {
                    "type": "uint64",
                    "key": "total"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "SmartContractStaking",
        "methods": [
            {
                "name": "setup",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "configure",
                "args": [
                    {
                        "type": "uint64",
                        "name": "period"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "fill",
                "args": [
                    {
                        "type": "uint64",
                        "name": "total"
                    },
                    {
                        "type": "uint64",
                        "name": "funding"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "participate",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "vote_k"
                    },
                    {
                        "type": "byte[]",
                        "name": "sel_k"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_fst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_lst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_kd"
                    },
                    {
                        "type": "byte[]",
                        "name": "sp_key"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "close",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}